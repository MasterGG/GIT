
link:     file format elf64-x86-64


Disassembly of section .init:

00000000004009d8 <_init>:
  4009d8:	48 83 ec 08          	sub    $0x8,%rsp
  4009dc:	48 8b 05 15 46 20 00 	mov    0x204615(%rip),%rax        # 604ff8 <_DYNAMIC+0x1f0>
  4009e3:	48 85 c0             	test   %rax,%rax
  4009e6:	74 05                	je     4009ed <_init+0x15>
  4009e8:	e8 53 01 00 00       	callq  400b40 <_Unwind_Resume@plt+0x10>
  4009ed:	48 83 c4 08          	add    $0x8,%rsp
  4009f1:	c3                   	retq   

Disassembly of section .plt:

0000000000400a00 <printf@plt-0x10>:
  400a00:	ff 35 02 46 20 00    	pushq  0x204602(%rip)        # 605008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400a06:	ff 25 04 46 20 00    	jmpq   *0x204604(%rip)        # 605010 <_GLOBAL_OFFSET_TABLE_+0x10>
  400a0c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400a10 <printf@plt>:
  400a10:	ff 25 02 46 20 00    	jmpq   *0x204602(%rip)        # 605018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400a16:	68 00 00 00 00       	pushq  $0x0
  400a1b:	e9 e0 ff ff ff       	jmpq   400a00 <_init+0x28>

0000000000400a20 <_ZdlPv@plt>:
  400a20:	ff 25 fa 45 20 00    	jmpq   *0x2045fa(%rip)        # 605020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400a26:	68 01 00 00 00       	pushq  $0x1
  400a2b:	e9 d0 ff ff ff       	jmpq   400a00 <_init+0x28>

0000000000400a30 <__cxa_rethrow@plt>:
  400a30:	ff 25 f2 45 20 00    	jmpq   *0x2045f2(%rip)        # 605028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400a36:	68 02 00 00 00       	pushq  $0x2
  400a3b:	e9 c0 ff ff ff       	jmpq   400a00 <_init+0x28>

0000000000400a40 <putchar@plt>:
  400a40:	ff 25 ea 45 20 00    	jmpq   *0x2045ea(%rip)        # 605030 <_GLOBAL_OFFSET_TABLE_+0x30>
  400a46:	68 03 00 00 00       	pushq  $0x3
  400a4b:	e9 b0 ff ff ff       	jmpq   400a00 <_init+0x28>

0000000000400a50 <_ZNSt8ios_base4InitC1Ev@plt>:
  400a50:	ff 25 e2 45 20 00    	jmpq   *0x2045e2(%rip)        # 605038 <_GLOBAL_OFFSET_TABLE_+0x38>
  400a56:	68 04 00 00 00       	pushq  $0x4
  400a5b:	e9 a0 ff ff ff       	jmpq   400a00 <_init+0x28>

0000000000400a60 <malloc@plt>:
  400a60:	ff 25 da 45 20 00    	jmpq   *0x2045da(%rip)        # 605040 <_GLOBAL_OFFSET_TABLE_+0x40>
  400a66:	68 05 00 00 00       	pushq  $0x5
  400a6b:	e9 90 ff ff ff       	jmpq   400a00 <_init+0x28>

0000000000400a70 <__libc_start_main@plt>:
  400a70:	ff 25 d2 45 20 00    	jmpq   *0x2045d2(%rip)        # 605048 <_GLOBAL_OFFSET_TABLE_+0x48>
  400a76:	68 06 00 00 00       	pushq  $0x6
  400a7b:	e9 80 ff ff ff       	jmpq   400a00 <_init+0x28>

0000000000400a80 <__cxa_atexit@plt>:
  400a80:	ff 25 ca 45 20 00    	jmpq   *0x2045ca(%rip)        # 605050 <_GLOBAL_OFFSET_TABLE_+0x50>
  400a86:	68 07 00 00 00       	pushq  $0x7
  400a8b:	e9 70 ff ff ff       	jmpq   400a00 <_init+0x28>

0000000000400a90 <_ZNSt8ios_base4InitD1Ev@plt>:
  400a90:	ff 25 c2 45 20 00    	jmpq   *0x2045c2(%rip)        # 605058 <_GLOBAL_OFFSET_TABLE_+0x58>
  400a96:	68 08 00 00 00       	pushq  $0x8
  400a9b:	e9 60 ff ff ff       	jmpq   400a00 <_init+0x28>

0000000000400aa0 <memmove@plt>:
  400aa0:	ff 25 ba 45 20 00    	jmpq   *0x2045ba(%rip)        # 605060 <_GLOBAL_OFFSET_TABLE_+0x60>
  400aa6:	68 09 00 00 00       	pushq  $0x9
  400aab:	e9 50 ff ff ff       	jmpq   400a00 <_init+0x28>

0000000000400ab0 <__stack_chk_fail@plt>:
  400ab0:	ff 25 b2 45 20 00    	jmpq   *0x2045b2(%rip)        # 605068 <_GLOBAL_OFFSET_TABLE_+0x68>
  400ab6:	68 0a 00 00 00       	pushq  $0xa
  400abb:	e9 40 ff ff ff       	jmpq   400a00 <_init+0x28>

0000000000400ac0 <_ZNSolsEPFRSoS_E@plt>:
  400ac0:	ff 25 aa 45 20 00    	jmpq   *0x2045aa(%rip)        # 605070 <_GLOBAL_OFFSET_TABLE_+0x70>
  400ac6:	68 0b 00 00 00       	pushq  $0xb
  400acb:	e9 30 ff ff ff       	jmpq   400a00 <_init+0x28>

0000000000400ad0 <__cxa_end_catch@plt>:
  400ad0:	ff 25 a2 45 20 00    	jmpq   *0x2045a2(%rip)        # 605078 <_GLOBAL_OFFSET_TABLE_+0x78>
  400ad6:	68 0c 00 00 00       	pushq  $0xc
  400adb:	e9 20 ff ff ff       	jmpq   400a00 <_init+0x28>

0000000000400ae0 <_ZSt17__throw_bad_allocv@plt>:
  400ae0:	ff 25 9a 45 20 00    	jmpq   *0x20459a(%rip)        # 605080 <_GLOBAL_OFFSET_TABLE_+0x80>
  400ae6:	68 0d 00 00 00       	pushq  $0xd
  400aeb:	e9 10 ff ff ff       	jmpq   400a00 <_init+0x28>

0000000000400af0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@plt>:
  400af0:	ff 25 92 45 20 00    	jmpq   *0x204592(%rip)        # 605088 <_GLOBAL_OFFSET_TABLE_+0x88>
  400af6:	68 0e 00 00 00       	pushq  $0xe
  400afb:	e9 00 ff ff ff       	jmpq   400a00 <_init+0x28>

0000000000400b00 <__cxa_begin_catch@plt>:
  400b00:	ff 25 8a 45 20 00    	jmpq   *0x20458a(%rip)        # 605090 <_GLOBAL_OFFSET_TABLE_+0x90>
  400b06:	68 0f 00 00 00       	pushq  $0xf
  400b0b:	e9 f0 fe ff ff       	jmpq   400a00 <_init+0x28>

0000000000400b10 <__gxx_personality_v0@plt>:
  400b10:	ff 25 82 45 20 00    	jmpq   *0x204582(%rip)        # 605098 <_GLOBAL_OFFSET_TABLE_+0x98>
  400b16:	68 10 00 00 00       	pushq  $0x10
  400b1b:	e9 e0 fe ff ff       	jmpq   400a00 <_init+0x28>

0000000000400b20 <_Znwm@plt>:
  400b20:	ff 25 7a 45 20 00    	jmpq   *0x20457a(%rip)        # 6050a0 <_GLOBAL_OFFSET_TABLE_+0xa0>
  400b26:	68 11 00 00 00       	pushq  $0x11
  400b2b:	e9 d0 fe ff ff       	jmpq   400a00 <_init+0x28>

0000000000400b30 <_Unwind_Resume@plt>:
  400b30:	ff 25 72 45 20 00    	jmpq   *0x204572(%rip)        # 6050a8 <_GLOBAL_OFFSET_TABLE_+0xa8>
  400b36:	68 12 00 00 00       	pushq  $0x12
  400b3b:	e9 c0 fe ff ff       	jmpq   400a00 <_init+0x28>

Disassembly of section .plt.got:

0000000000400b40 <.plt.got>:
  400b40:	ff 25 b2 44 20 00    	jmpq   *0x2044b2(%rip)        # 604ff8 <_DYNAMIC+0x1f0>
  400b46:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

0000000000400b50 <_start>:
  400b50:	31 ed                	xor    %ebp,%ebp
  400b52:	49 89 d1             	mov    %rdx,%r9
  400b55:	5e                   	pop    %rsi
  400b56:	48 89 e2             	mov    %rsp,%rdx
  400b59:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  400b5d:	50                   	push   %rax
  400b5e:	54                   	push   %rsp
  400b5f:	49 c7 c0 a0 2e 40 00 	mov    $0x402ea0,%r8
  400b66:	48 c7 c1 30 2e 40 00 	mov    $0x402e30,%rcx
  400b6d:	48 c7 c7 ad 0d 40 00 	mov    $0x400dad,%rdi
  400b74:	e8 f7 fe ff ff       	callq  400a70 <__libc_start_main@plt>
  400b79:	f4                   	hlt    
  400b7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400b80 <deregister_tm_clones>:
  400b80:	b8 c7 50 60 00       	mov    $0x6050c7,%eax
  400b85:	55                   	push   %rbp
  400b86:	48 2d c0 50 60 00    	sub    $0x6050c0,%rax
  400b8c:	48 83 f8 0e          	cmp    $0xe,%rax
  400b90:	48 89 e5             	mov    %rsp,%rbp
  400b93:	76 1b                	jbe    400bb0 <deregister_tm_clones+0x30>
  400b95:	b8 00 00 00 00       	mov    $0x0,%eax
  400b9a:	48 85 c0             	test   %rax,%rax
  400b9d:	74 11                	je     400bb0 <deregister_tm_clones+0x30>
  400b9f:	5d                   	pop    %rbp
  400ba0:	bf c0 50 60 00       	mov    $0x6050c0,%edi
  400ba5:	ff e0                	jmpq   *%rax
  400ba7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  400bae:	00 00 
  400bb0:	5d                   	pop    %rbp
  400bb1:	c3                   	retq   
  400bb2:	0f 1f 40 00          	nopl   0x0(%rax)
  400bb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  400bbd:	00 00 00 

0000000000400bc0 <register_tm_clones>:
  400bc0:	be c0 50 60 00       	mov    $0x6050c0,%esi
  400bc5:	55                   	push   %rbp
  400bc6:	48 81 ee c0 50 60 00 	sub    $0x6050c0,%rsi
  400bcd:	48 c1 fe 03          	sar    $0x3,%rsi
  400bd1:	48 89 e5             	mov    %rsp,%rbp
  400bd4:	48 89 f0             	mov    %rsi,%rax
  400bd7:	48 c1 e8 3f          	shr    $0x3f,%rax
  400bdb:	48 01 c6             	add    %rax,%rsi
  400bde:	48 d1 fe             	sar    %rsi
  400be1:	74 15                	je     400bf8 <register_tm_clones+0x38>
  400be3:	b8 00 00 00 00       	mov    $0x0,%eax
  400be8:	48 85 c0             	test   %rax,%rax
  400beb:	74 0b                	je     400bf8 <register_tm_clones+0x38>
  400bed:	5d                   	pop    %rbp
  400bee:	bf c0 50 60 00       	mov    $0x6050c0,%edi
  400bf3:	ff e0                	jmpq   *%rax
  400bf5:	0f 1f 00             	nopl   (%rax)
  400bf8:	5d                   	pop    %rbp
  400bf9:	c3                   	retq   
  400bfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400c00 <__do_global_dtors_aux>:
  400c00:	80 3d c9 45 20 00 00 	cmpb   $0x0,0x2045c9(%rip)        # 6051d0 <completed.7585>
  400c07:	75 11                	jne    400c1a <__do_global_dtors_aux+0x1a>
  400c09:	55                   	push   %rbp
  400c0a:	48 89 e5             	mov    %rsp,%rbp
  400c0d:	e8 6e ff ff ff       	callq  400b80 <deregister_tm_clones>
  400c12:	5d                   	pop    %rbp
  400c13:	c6 05 b6 45 20 00 01 	movb   $0x1,0x2045b6(%rip)        # 6051d0 <completed.7585>
  400c1a:	f3 c3                	repz retq 
  400c1c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400c20 <frame_dummy>:
  400c20:	bf 00 4e 60 00       	mov    $0x604e00,%edi
  400c25:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  400c29:	75 05                	jne    400c30 <frame_dummy+0x10>
  400c2b:	eb 93                	jmp    400bc0 <register_tm_clones>
  400c2d:	0f 1f 00             	nopl   (%rax)
  400c30:	b8 00 00 00 00       	mov    $0x0,%eax
  400c35:	48 85 c0             	test   %rax,%rax
  400c38:	74 f1                	je     400c2b <frame_dummy+0xb>
  400c3a:	55                   	push   %rbp
  400c3b:	48 89 e5             	mov    %rsp,%rbp
  400c3e:	ff d0                	callq  *%rax
  400c40:	5d                   	pop    %rbp
  400c41:	e9 7a ff ff ff       	jmpq   400bc0 <register_tm_clones>

0000000000400c46 <_Z23PrintLinklist_reverselyPP8Linknode>:
//{
//	*phead = NULL;
//}

void PrintLinklist_reversely(Linknode **phead)
{
  400c46:	55                   	push   %rbp
  400c47:	48 89 e5             	mov    %rsp,%rbp
  400c4a:	53                   	push   %rbx
  400c4b:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  400c52:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
  400c59:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  400c60:	00 00 
  400c62:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  400c66:	31 c0                	xor    %eax,%eax
	std::stack<Linknode*> nodes;
  400c68:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  400c6c:	48 89 c7             	mov    %rax,%rdi
  400c6f:	e8 ee 02 00 00       	callq  400f62 <_ZNSt5dequeIP8LinknodeSaIS1_EEC1Ev>
  400c74:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  400c78:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  400c7f:	48 89 d6             	mov    %rdx,%rsi
  400c82:	48 89 c7             	mov    %rax,%rdi
  400c85:	e8 a0 03 00 00       	callq  40102a <_ZNSt5stackIP8LinknodeSt5dequeIS1_SaIS1_EEEC1ERKS4_>
  400c8a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  400c8e:	48 89 c7             	mov    %rax,%rdi
  400c91:	e8 e8 02 00 00       	callq  400f7e <_ZNSt5dequeIP8LinknodeSaIS1_EED1Ev>
	Linknode* temp = (*phead) -> next;
  400c96:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  400c9d:	48 8b 00             	mov    (%rax),%rax
  400ca0:	48 8b 40 08          	mov    0x8(%rax),%rax
  400ca4:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	while(temp != NULL)
  400ca8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  400cac:	48 85 c0             	test   %rax,%rax
  400caf:	74 24                	je     400cd5 <_Z23PrintLinklist_reverselyPP8Linknode+0x8f>
	{
		
		nodes.push(temp);
  400cb1:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  400cb5:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  400cbc:	48 89 d6             	mov    %rdx,%rsi
  400cbf:	48 89 c7             	mov    %rax,%rdi
  400cc2:	e8 89 03 00 00       	callq  401050 <_ZNSt5stackIP8LinknodeSt5dequeIS1_SaIS1_EEE4pushERKS1_>
		temp = temp->next;
  400cc7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  400ccb:	48 8b 40 08          	mov    0x8(%rax),%rax
  400ccf:	48 89 45 90          	mov    %rax,-0x70(%rbp)

void PrintLinklist_reversely(Linknode **phead)
{
	std::stack<Linknode*> nodes;
	Linknode* temp = (*phead) -> next;
	while(temp != NULL)
  400cd3:	eb d3                	jmp    400ca8 <_Z23PrintLinklist_reverselyPP8Linknode+0x62>
	{
		
		nodes.push(temp);
		temp = temp->next;
	}
	while(!nodes.empty())
  400cd5:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  400cdc:	48 89 c7             	mov    %rax,%rdi
  400cdf:	e8 92 03 00 00       	callq  401076 <_ZNKSt5stackIP8LinknodeSt5dequeIS1_SaIS1_EEE5emptyEv>
  400ce4:	83 f0 01             	xor    $0x1,%eax
  400ce7:	84 c0                	test   %al,%al
  400ce9:	74 3e                	je     400d29 <_Z23PrintLinklist_reverselyPP8Linknode+0xe3>
	{
		temp = nodes.top();
  400ceb:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  400cf2:	48 89 c7             	mov    %rax,%rdi
  400cf5:	e8 96 03 00 00       	callq  401090 <_ZNSt5stackIP8LinknodeSt5dequeIS1_SaIS1_EEE3topEv>
  400cfa:	48 8b 00             	mov    (%rax),%rax
  400cfd:	48 89 45 90          	mov    %rax,-0x70(%rbp)
		printf("%d\t",temp->value);	
  400d01:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  400d05:	8b 00                	mov    (%rax),%eax
  400d07:	89 c6                	mov    %eax,%esi
  400d09:	bf b4 2e 40 00       	mov    $0x402eb4,%edi
  400d0e:	b8 00 00 00 00       	mov    $0x0,%eax
  400d13:	e8 f8 fc ff ff       	callq  400a10 <printf@plt>
		nodes.pop();
  400d18:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  400d1f:	48 89 c7             	mov    %rax,%rdi
  400d22:	e8 83 03 00 00       	callq  4010aa <_ZNSt5stackIP8LinknodeSt5dequeIS1_SaIS1_EEE3popEv>
	{
		
		nodes.push(temp);
		temp = temp->next;
	}
	while(!nodes.empty())
  400d27:	eb ac                	jmp    400cd5 <_Z23PrintLinklist_reverselyPP8Linknode+0x8f>
//	*phead = NULL;
//}

void PrintLinklist_reversely(Linknode **phead)
{
	std::stack<Linknode*> nodes;
  400d29:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  400d30:	48 89 c7             	mov    %rax,%rdi
  400d33:	e8 0e 02 00 00       	callq  400f46 <_ZNSt5stackIP8LinknodeSt5dequeIS1_SaIS1_EEED1Ev>
	{
		temp = nodes.top();
		printf("%d\t",temp->value);	
		nodes.pop();
	}
}
  400d38:	90                   	nop
  400d39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400d3d:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  400d44:	00 00 
  400d46:	74 5b                	je     400da3 <_Z23PrintLinklist_reverselyPP8Linknode+0x15d>
  400d48:	eb 54                	jmp    400d9e <_Z23PrintLinklist_reverselyPP8Linknode+0x158>
  400d4a:	48 89 c3             	mov    %rax,%rbx
  400d4d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  400d51:	48 89 c7             	mov    %rax,%rdi
  400d54:	e8 25 02 00 00       	callq  400f7e <_ZNSt5dequeIP8LinknodeSaIS1_EED1Ev>
  400d59:	48 89 d8             	mov    %rbx,%rax
  400d5c:	48 89 c7             	mov    %rax,%rdi
  400d5f:	e8 cc fd ff ff       	callq  400b30 <_Unwind_Resume@plt>
  400d64:	48 89 c3             	mov    %rax,%rbx
  400d67:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  400d6e:	48 89 c7             	mov    %rax,%rdi
  400d71:	e8 d0 01 00 00       	callq  400f46 <_ZNSt5stackIP8LinknodeSt5dequeIS1_SaIS1_EEED1Ev>
  400d76:	48 89 d8             	mov    %rbx,%rax
  400d79:	48 89 c7             	mov    %rax,%rdi
  400d7c:	e8 af fd ff ff       	callq  400b30 <_Unwind_Resume@plt>
  400d81:	48 89 c3             	mov    %rax,%rbx
//	*phead = NULL;
//}

void PrintLinklist_reversely(Linknode **phead)
{
	std::stack<Linknode*> nodes;
  400d84:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  400d8b:	48 89 c7             	mov    %rax,%rdi
  400d8e:	e8 b3 01 00 00       	callq  400f46 <_ZNSt5stackIP8LinknodeSt5dequeIS1_SaIS1_EEED1Ev>
  400d93:	48 89 d8             	mov    %rbx,%rax
  400d96:	48 89 c7             	mov    %rax,%rdi
  400d99:	e8 92 fd ff ff       	callq  400b30 <_Unwind_Resume@plt>
	{
		temp = nodes.top();
		printf("%d\t",temp->value);	
		nodes.pop();
	}
}
  400d9e:	e8 0d fd ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  400da3:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  400daa:	5b                   	pop    %rbx
  400dab:	5d                   	pop    %rbp
  400dac:	c3                   	retq   

0000000000400dad <main>:

int main()
{
  400dad:	55                   	push   %rbp
  400dae:	48 89 e5             	mov    %rsp,%rbp
  400db1:	48 83 ec 20          	sub    $0x20,%rsp
	Linknode** head;
	*head = (Linknode*)malloc(sizeof(Linknode));
  400db5:	bf 10 00 00 00       	mov    $0x10,%edi
  400dba:	e8 a1 fc ff ff       	callq  400a60 <malloc@plt>
  400dbf:	48 89 c2             	mov    %rax,%rdx
  400dc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400dc6:	48 89 10             	mov    %rdx,(%rax)
	(*head) -> next = NULL;
  400dc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400dcd:	48 8b 00             	mov    (%rax),%rax
  400dd0:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  400dd7:	00 
	printf("head->value=%d\n", (*head) -> value);
  400dd8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400ddc:	48 8b 00             	mov    (%rax),%rax
  400ddf:	8b 00                	mov    (%rax),%eax
  400de1:	89 c6                	mov    %eax,%esi
  400de3:	bf b8 2e 40 00       	mov    $0x402eb8,%edi
  400de8:	b8 00 00 00 00       	mov    $0x0,%eax
  400ded:	e8 1e fc ff ff       	callq  400a10 <printf@plt>
	Linknode* ptail = *head;
  400df2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400df6:	48 8b 00             	mov    (%rax),%rax
  400df9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for(int i = 0; i < 10; i++)
  400dfd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  400e04:	83 7d e4 09          	cmpl   $0x9,-0x1c(%rbp)
  400e08:	7f 41                	jg     400e4b <main+0x9e>
	{
		Linknode* temp = (Linknode*)malloc(sizeof(Linknode));
  400e0a:	bf 10 00 00 00       	mov    $0x10,%edi
  400e0f:	e8 4c fc ff ff       	callq  400a60 <malloc@plt>
  400e14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		temp->value = i;
  400e18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400e1c:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  400e1f:	89 10                	mov    %edx,(%rax)
		temp ->next = NULL;
  400e21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400e25:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  400e2c:	00 
		ptail->next = temp;	
  400e2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400e31:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  400e35:	48 89 50 08          	mov    %rdx,0x8(%rax)
		ptail = ptail->next;
  400e39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400e3d:	48 8b 40 08          	mov    0x8(%rax),%rax
  400e41:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	Linknode** head;
	*head = (Linknode*)malloc(sizeof(Linknode));
	(*head) -> next = NULL;
	printf("head->value=%d\n", (*head) -> value);
	Linknode* ptail = *head;
	for(int i = 0; i < 10; i++)
  400e45:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  400e49:	eb b9                	jmp    400e04 <main+0x57>
		temp->value = i;
		temp ->next = NULL;
		ptail->next = temp;	
		ptail = ptail->next;
	}
	ptail = *head;
  400e4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400e4f:	48 8b 00             	mov    (%rax),%rax
  400e52:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while(ptail->next != NULL)
  400e56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400e5a:	48 8b 40 08          	mov    0x8(%rax),%rax
  400e5e:	48 85 c0             	test   %rax,%rax
  400e61:	74 29                	je     400e8c <main+0xdf>
	{
		printf("%d\t",ptail->next->value);
  400e63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400e67:	48 8b 40 08          	mov    0x8(%rax),%rax
  400e6b:	8b 00                	mov    (%rax),%eax
  400e6d:	89 c6                	mov    %eax,%esi
  400e6f:	bf b4 2e 40 00       	mov    $0x402eb4,%edi
  400e74:	b8 00 00 00 00       	mov    $0x0,%eax
  400e79:	e8 92 fb ff ff       	callq  400a10 <printf@plt>
		ptail = ptail->next;
  400e7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400e82:	48 8b 40 08          	mov    0x8(%rax),%rax
  400e86:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		temp ->next = NULL;
		ptail->next = temp;	
		ptail = ptail->next;
	}
	ptail = *head;
	while(ptail->next != NULL)
  400e8a:	eb ca                	jmp    400e56 <main+0xa9>
	{
		printf("%d\t",ptail->next->value);
		ptail = ptail->next;
	}
	std::cout<<std::endl;
  400e8c:	be f0 0a 40 00       	mov    $0x400af0,%esi
  400e91:	bf c0 50 60 00       	mov    $0x6050c0,%edi
  400e96:	e8 25 fc ff ff       	callq  400ac0 <_ZNSolsEPFRSoS_E@plt>
	PrintLinklist_reversely(head);
  400e9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400e9f:	48 89 c7             	mov    %rax,%rdi
  400ea2:	e8 9f fd ff ff       	callq  400c46 <_Z23PrintLinklist_reverselyPP8Linknode>
	printf("\n");
  400ea7:	bf 0a 00 00 00       	mov    $0xa,%edi
  400eac:	e8 8f fb ff ff       	callq  400a40 <putchar@plt>
	return 0;
  400eb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
  400eb6:	c9                   	leaveq 
  400eb7:	c3                   	retq   

0000000000400eb8 <_Z41__static_initialization_and_destruction_0ii>:
  400eb8:	55                   	push   %rbp
  400eb9:	48 89 e5             	mov    %rsp,%rbp
  400ebc:	48 83 ec 10          	sub    $0x10,%rsp
  400ec0:	89 7d fc             	mov    %edi,-0x4(%rbp)
  400ec3:	89 75 f8             	mov    %esi,-0x8(%rbp)
  400ec6:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  400eca:	75 27                	jne    400ef3 <_Z41__static_initialization_and_destruction_0ii+0x3b>
  400ecc:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
  400ed3:	75 1e                	jne    400ef3 <_Z41__static_initialization_and_destruction_0ii+0x3b>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  //@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
  400ed5:	bf d1 51 60 00       	mov    $0x6051d1,%edi
  400eda:	e8 71 fb ff ff       	callq  400a50 <_ZNSt8ios_base4InitC1Ev@plt>
  400edf:	ba b8 50 60 00       	mov    $0x6050b8,%edx
  400ee4:	be d1 51 60 00       	mov    $0x6051d1,%esi
  400ee9:	bf 90 0a 40 00       	mov    $0x400a90,%edi
  400eee:	e8 8d fb ff ff       	callq  400a80 <__cxa_atexit@plt>
  400ef3:	90                   	nop
  400ef4:	c9                   	leaveq 
  400ef5:	c3                   	retq   

0000000000400ef6 <_GLOBAL__sub_I__Z23PrintLinklist_reverselyPP8Linknode>:
  400ef6:	55                   	push   %rbp
  400ef7:	48 89 e5             	mov    %rsp,%rbp
  400efa:	be ff ff 00 00       	mov    $0xffff,%esi
  400eff:	bf 01 00 00 00       	mov    $0x1,%edi
  400f04:	e8 af ff ff ff       	callq  400eb8 <_Z41__static_initialization_and_destruction_0ii>
  400f09:	5d                   	pop    %rbp
  400f0a:	c3                   	retq   

0000000000400f0b <_ZnwmPv>:
void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
  __attribute__((__externally_visible__));

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
  400f0b:	55                   	push   %rbp
  400f0c:	48 89 e5             	mov    %rsp,%rbp
  400f0f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400f13:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  400f17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400f1b:	5d                   	pop    %rbp
  400f1c:	c3                   	retq   

0000000000400f1d <_ZSt16__deque_buf_sizem>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
  400f1d:	55                   	push   %rbp
  400f1e:	48 89 e5             	mov    %rsp,%rbp
  400f21:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
  400f25:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
  400f2c:	00 
  400f2d:	77 10                	ja     400f3f <_ZSt16__deque_buf_sizem+0x22>
  400f2f:	b8 00 02 00 00       	mov    $0x200,%eax
  400f34:	ba 00 00 00 00       	mov    $0x0,%edx
  400f39:	48 f7 75 f8          	divq   -0x8(%rbp)
  400f3d:	eb 05                	jmp    400f44 <_ZSt16__deque_buf_sizem+0x27>
  400f3f:	b8 01 00 00 00       	mov    $0x1,%eax
  400f44:	5d                   	pop    %rbp
  400f45:	c3                   	retq   

0000000000400f46 <_ZNSt5stackIP8LinknodeSt5dequeIS1_SaIS1_EEED1Ev>:
   *  which is a typedef for the second Sequence parameter, and @c
   *  push, @c pop, and @c top, which are standard %stack/FILO
   *  operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class stack
  400f46:	55                   	push   %rbp
  400f47:	48 89 e5             	mov    %rsp,%rbp
  400f4a:	48 83 ec 10          	sub    $0x10,%rsp
  400f4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400f52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400f56:	48 89 c7             	mov    %rax,%rdi
  400f59:	e8 20 00 00 00       	callq  400f7e <_ZNSt5dequeIP8LinknodeSaIS1_EED1Ev>
  400f5e:	90                   	nop
  400f5f:	c9                   	leaveq 
  400f60:	c3                   	retq   
  400f61:	90                   	nop

0000000000400f62 <_ZNSt5dequeIP8LinknodeSaIS1_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %deque with no elements.
       */
      deque() : _Base() { }
  400f62:	55                   	push   %rbp
  400f63:	48 89 e5             	mov    %rsp,%rbp
  400f66:	48 83 ec 10          	sub    $0x10,%rsp
  400f6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400f6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400f72:	48 89 c7             	mov    %rax,%rdi
  400f75:	e8 68 01 00 00       	callq  4010e2 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EEC1Ev>
  400f7a:	90                   	nop
  400f7b:	c9                   	leaveq 
  400f7c:	c3                   	retq   
  400f7d:	90                   	nop

0000000000400f7e <_ZNSt5dequeIP8LinknodeSaIS1_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
  400f7e:	55                   	push   %rbp
  400f7f:	48 89 e5             	mov    %rsp,%rbp
  400f82:	53                   	push   %rbx
  400f83:	48 83 ec 68          	sub    $0x68,%rsp
  400f87:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  400f8b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  400f92:	00 00 
  400f94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  400f98:	31 c0                	xor    %eax,%eax
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
  400f9a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  400f9e:	48 89 c7             	mov    %rax,%rdi
  400fa1:	e8 70 02 00 00       	callq  401216 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE19_M_get_Tp_allocatorEv>
  400fa6:	48 89 c3             	mov    %rax,%rbx
  400fa9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  400fad:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  400fb1:	48 89 d6             	mov    %rdx,%rsi
  400fb4:	48 89 c7             	mov    %rax,%rdi
  400fb7:	e8 2c 02 00 00       	callq  4011e8 <_ZNSt5dequeIP8LinknodeSaIS1_EE3endEv>
  400fbc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  400fc0:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  400fc4:	48 89 d6             	mov    %rdx,%rsi
  400fc7:	48 89 c7             	mov    %rax,%rdi
  400fca:	e8 eb 01 00 00       	callq  4011ba <_ZNSt5dequeIP8LinknodeSaIS1_EE5beginEv>
  400fcf:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  400fd3:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
  400fd7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  400fdb:	48 89 d9             	mov    %rbx,%rcx
  400fde:	48 89 c7             	mov    %rax,%rdi
  400fe1:	e8 8c 02 00 00       	callq  401272 <_ZNSt5dequeIP8LinknodeSaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
  400fe6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  400fea:	48 89 c7             	mov    %rax,%rdi
  400fed:	e8 3e 01 00 00       	callq  401130 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EED1Ev>
  400ff2:	90                   	nop
  400ff3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400ff7:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  400ffe:	00 00 
  401000:	74 21                	je     401023 <_ZNSt5dequeIP8LinknodeSaIS1_EED1Ev+0xa5>
  401002:	eb 1a                	jmp    40101e <_ZNSt5dequeIP8LinknodeSaIS1_EED1Ev+0xa0>
  401004:	48 89 c3             	mov    %rax,%rbx
  401007:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40100b:	48 89 c7             	mov    %rax,%rdi
  40100e:	e8 1d 01 00 00       	callq  401130 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EED1Ev>
  401013:	48 89 d8             	mov    %rbx,%rax
  401016:	48 89 c7             	mov    %rax,%rdi
  401019:	e8 12 fb ff ff       	callq  400b30 <_Unwind_Resume@plt>
  40101e:	e8 8d fa ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  401023:	48 83 c4 68          	add    $0x68,%rsp
  401027:	5b                   	pop    %rbx
  401028:	5d                   	pop    %rbp
  401029:	c3                   	retq   

000000000040102a <_ZNSt5stackIP8LinknodeSt5dequeIS1_SaIS1_EEEC1ERKS4_>:
      /**
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      explicit
      stack(const _Sequence& __c = _Sequence())
  40102a:	55                   	push   %rbp
  40102b:	48 89 e5             	mov    %rsp,%rbp
  40102e:	48 83 ec 10          	sub    $0x10,%rsp
  401032:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401036:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : c(__c) { }
  40103a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40103e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401042:	48 89 d6             	mov    %rdx,%rsi
  401045:	48 89 c7             	mov    %rax,%rdi
  401048:	e8 63 02 00 00       	callq  4012b0 <_ZNSt5dequeIP8LinknodeSaIS1_EEC1ERKS3_>
  40104d:	90                   	nop
  40104e:	c9                   	leaveq 
  40104f:	c3                   	retq   

0000000000401050 <_ZNSt5stackIP8LinknodeSt5dequeIS1_SaIS1_EEE4pushERKS1_>:
       *  element at the top of the %stack and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
  401050:	55                   	push   %rbp
  401051:	48 89 e5             	mov    %rsp,%rbp
  401054:	48 83 ec 10          	sub    $0x10,%rsp
  401058:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40105c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { c.push_back(__x); }
  401060:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401064:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401068:	48 89 d6             	mov    %rdx,%rsi
  40106b:	48 89 c7             	mov    %rax,%rdi
  40106e:	e8 6f 03 00 00       	callq  4013e2 <_ZNSt5dequeIP8LinknodeSaIS1_EE9push_backERKS1_>
  401073:	90                   	nop
  401074:	c9                   	leaveq 
  401075:	c3                   	retq   

0000000000401076 <_ZNKSt5stackIP8LinknodeSt5dequeIS1_SaIS1_EEE5emptyEv>:

      /**
       *  Returns true if the %stack is empty.
       */
      bool
      empty() const
  401076:	55                   	push   %rbp
  401077:	48 89 e5             	mov    %rsp,%rbp
  40107a:	48 83 ec 10          	sub    $0x10,%rsp
  40107e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return c.empty(); }
  401082:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401086:	48 89 c7             	mov    %rax,%rdi
  401089:	e8 c4 03 00 00       	callq  401452 <_ZNKSt5dequeIP8LinknodeSaIS1_EE5emptyEv>
  40108e:	c9                   	leaveq 
  40108f:	c3                   	retq   

0000000000401090 <_ZNSt5stackIP8LinknodeSt5dequeIS1_SaIS1_EEE3topEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %stack.
       */
      reference
      top()
  401090:	55                   	push   %rbp
  401091:	48 89 e5             	mov    %rsp,%rbp
  401094:	48 83 ec 10          	sub    $0x10,%rsp
  401098:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	__glibcxx_requires_nonempty();
	return c.back();
  40109c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4010a0:	48 89 c7             	mov    %rax,%rdi
  4010a3:	e8 d4 03 00 00       	callq  40147c <_ZNSt5dequeIP8LinknodeSaIS1_EE4backEv>
      }
  4010a8:	c9                   	leaveq 
  4010a9:	c3                   	retq   

00000000004010aa <_ZNSt5stackIP8LinknodeSt5dequeIS1_SaIS1_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
  4010aa:	55                   	push   %rbp
  4010ab:	48 89 e5             	mov    %rsp,%rbp
  4010ae:	48 83 ec 10          	sub    $0x10,%rsp
  4010b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	__glibcxx_requires_nonempty();
	c.pop_back();
  4010b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4010ba:	48 89 c7             	mov    %rax,%rdi
  4010bd:	e8 16 04 00 00       	callq  4014d8 <_ZNSt5dequeIP8LinknodeSaIS1_EE8pop_backEv>
      }
  4010c2:	90                   	nop
  4010c3:	c9                   	leaveq 
  4010c4:	c3                   	retq   
  4010c5:	90                   	nop

00000000004010c6 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE11_Deque_implD1Ev>:
      typedef typename iterator::_Map_pointer _Map_pointer;

      //This struct encapsulates the implementation of the std::deque
      //standard container and at the same time makes use of the EBO
      //for empty allocators.
      struct _Deque_impl
  4010c6:	55                   	push   %rbp
  4010c7:	48 89 e5             	mov    %rsp,%rbp
  4010ca:	48 83 ec 10          	sub    $0x10,%rsp
  4010ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4010d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4010d6:	48 89 c7             	mov    %rax,%rdi
  4010d9:	e8 aa 04 00 00       	callq  401588 <_ZNSaIP8LinknodeED1Ev>
  4010de:	90                   	nop
  4010df:	c9                   	leaveq 
  4010e0:	c3                   	retq   
  4010e1:	90                   	nop

00000000004010e2 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EEC1Ev>:
      { return allocator_type(_M_get_Tp_allocator()); }

      typedef _Deque_iterator<_Tp, _Tp&, _Ptr>          iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;

      _Deque_base()
  4010e2:	55                   	push   %rbp
  4010e3:	48 89 e5             	mov    %rsp,%rbp
  4010e6:	53                   	push   %rbx
  4010e7:	48 83 ec 18          	sub    $0x18,%rsp
  4010eb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      : _M_impl()
  4010ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4010f3:	48 89 c7             	mov    %rax,%rdi
  4010f6:	e8 3b 04 00 00       	callq  401536 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
  4010fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4010ff:	be 00 00 00 00       	mov    $0x0,%esi
  401104:	48 89 c7             	mov    %rax,%rdi
  401107:	e8 98 04 00 00       	callq  4015a4 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE17_M_initialize_mapEm>
  40110c:	eb 1a                	jmp    401128 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EEC1Ev+0x46>
  40110e:	48 89 c3             	mov    %rax,%rbx

      typedef _Deque_iterator<_Tp, _Tp&, _Ptr>          iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;

      _Deque_base()
      : _M_impl()
  401111:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401115:	48 89 c7             	mov    %rax,%rdi
  401118:	e8 a9 ff ff ff       	callq  4010c6 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE11_Deque_implD1Ev>
  40111d:	48 89 d8             	mov    %rbx,%rax
  401120:	48 89 c7             	mov    %rax,%rdi
  401123:	e8 08 fa ff ff       	callq  400b30 <_Unwind_Resume@plt>
      { _M_initialize_map(0); }
  401128:	48 83 c4 18          	add    $0x18,%rsp
  40112c:	5b                   	pop    %rbx
  40112d:	5d                   	pop    %rbp
  40112e:	c3                   	retq   
  40112f:	90                   	nop

0000000000401130 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EED1Ev>:
      }
#endif
    };

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
  401130:	55                   	push   %rbp
  401131:	48 89 e5             	mov    %rsp,%rbp
  401134:	53                   	push   %rbx
  401135:	48 83 ec 18          	sub    $0x18,%rsp
  401139:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
  40113d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401141:	48 8b 00             	mov    (%rax),%rax
  401144:	48 85 c0             	test   %rax,%rax
  401147:	74 41                	je     40118a <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EED1Ev+0x5a>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
			   this->_M_impl._M_finish._M_node + 1);
  401149:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40114d:	48 8b 40 48          	mov    0x48(%rax),%rax
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
  401151:	48 8d 50 08          	lea    0x8(%rax),%rdx
  401155:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401159:	48 8b 48 28          	mov    0x28(%rax),%rcx
  40115d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401161:	48 89 ce             	mov    %rcx,%rsi
  401164:	48 89 c7             	mov    %rax,%rdi
  401167:	e8 04 06 00 00       	callq  401770 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE16_M_destroy_nodesEPPS1_S5_>
			   this->_M_impl._M_finish._M_node + 1);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
  40116c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401170:	48 8b 50 08          	mov    0x8(%rax),%rdx
  401174:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401178:	48 8b 08             	mov    (%rax),%rcx
  40117b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40117f:	48 89 ce             	mov    %rcx,%rsi
  401182:	48 89 c7             	mov    %rax,%rdi
  401185:	e8 2c 06 00 00       	callq  4017b6 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE17_M_deallocate_mapEPPS1_m>
	}
    }
  40118a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40118e:	48 89 c7             	mov    %rax,%rdi
  401191:	e8 30 ff ff ff       	callq  4010c6 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE11_Deque_implD1Ev>
  401196:	eb 1a                	jmp    4011b2 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EED1Ev+0x82>
  401198:	48 89 c3             	mov    %rax,%rbx
  40119b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40119f:	48 89 c7             	mov    %rax,%rdi
  4011a2:	e8 1f ff ff ff       	callq  4010c6 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE11_Deque_implD1Ev>
  4011a7:	48 89 d8             	mov    %rbx,%rax
  4011aa:	48 89 c7             	mov    %rax,%rdi
  4011ad:	e8 7e f9 ff ff       	callq  400b30 <_Unwind_Resume@plt>
  4011b2:	48 83 c4 18          	add    $0x18,%rsp
  4011b6:	5b                   	pop    %rbx
  4011b7:	5d                   	pop    %rbp
  4011b8:	c3                   	retq   
  4011b9:	90                   	nop

00000000004011ba <_ZNSt5dequeIP8LinknodeSaIS1_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
  4011ba:	55                   	push   %rbp
  4011bb:	48 89 e5             	mov    %rsp,%rbp
  4011be:	48 83 ec 10          	sub    $0x10,%rsp
  4011c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4011c6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return this->_M_impl._M_start; }
  4011ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4011ce:	48 8d 50 10          	lea    0x10(%rax),%rdx
  4011d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4011d6:	48 89 d6             	mov    %rdx,%rsi
  4011d9:	48 89 c7             	mov    %rax,%rdi
  4011dc:	e8 43 00 00 00       	callq  401224 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1ERKS4_>
  4011e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4011e5:	c9                   	leaveq 
  4011e6:	c3                   	retq   
  4011e7:	90                   	nop

00000000004011e8 <_ZNSt5dequeIP8LinknodeSaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
  4011e8:	55                   	push   %rbp
  4011e9:	48 89 e5             	mov    %rsp,%rbp
  4011ec:	48 83 ec 10          	sub    $0x10,%rsp
  4011f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4011f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return this->_M_impl._M_finish; }
  4011f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4011fc:	48 8d 50 30          	lea    0x30(%rax),%rdx
  401200:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401204:	48 89 d6             	mov    %rdx,%rsi
  401207:	48 89 c7             	mov    %rax,%rdi
  40120a:	e8 15 00 00 00       	callq  401224 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1ERKS4_>
  40120f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401213:	c9                   	leaveq 
  401214:	c3                   	retq   
  401215:	90                   	nop

0000000000401216 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE19_M_get_Tp_allocatorEv>:
	  swap(this->_M_map_size, __x._M_map_size);
	}
      };

      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
  401216:	55                   	push   %rbp
  401217:	48 89 e5             	mov    %rsp,%rbp
  40121a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  40121e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401222:	5d                   	pop    %rbp
  401223:	c3                   	retq   

0000000000401224 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1ERKS4_>:
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
  401224:	55                   	push   %rbp
  401225:	48 89 e5             	mov    %rsp,%rbp
  401228:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40122c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
  401230:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401234:	48 8b 10             	mov    (%rax),%rdx
  401237:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40123b:	48 89 10             	mov    %rdx,(%rax)
  40123e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401242:	48 8b 50 08          	mov    0x8(%rax),%rdx
  401246:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40124a:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40124e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401252:	48 8b 50 10          	mov    0x10(%rax),%rdx
  401256:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40125a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  40125e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401262:	48 8b 50 18          	mov    0x18(%rax),%rdx
  401266:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40126a:	48 89 50 18          	mov    %rdx,0x18(%rax)
  40126e:	90                   	nop
  40126f:	5d                   	pop    %rbp
  401270:	c3                   	retq   
  401271:	90                   	nop

0000000000401272 <_ZNSt5dequeIP8LinknodeSaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
        void
        _M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
        { _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
  401272:	55                   	push   %rbp
  401273:	48 89 e5             	mov    %rsp,%rbp
  401276:	48 83 ec 50          	sub    $0x50,%rsp
  40127a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40127e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  401282:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  401286:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  40128a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  401291:	00 00 
  401293:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  401297:	31 c0                	xor    %eax,%eax
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
  401299:	90                   	nop
  40129a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40129e:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4012a5:	00 00 
  4012a7:	74 05                	je     4012ae <_ZNSt5dequeIP8LinknodeSaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_+0x3c>
  4012a9:	e8 02 f8 ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  4012ae:	c9                   	leaveq 
  4012af:	c3                   	retq   

00000000004012b0 <_ZNSt5dequeIP8LinknodeSaIS1_EEC1ERKS3_>:
       *  @param  __x  A %deque of identical element and allocator types.
       *
       *  The newly-created %deque uses a copy of the allocation object used
       *  by @a __x.
       */
      deque(const deque& __x)
  4012b0:	55                   	push   %rbp
  4012b1:	48 89 e5             	mov    %rsp,%rbp
  4012b4:	53                   	push   %rbx
  4012b5:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  4012bc:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  4012c3:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
  4012ca:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4012d1:	00 00 
  4012d3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4012d7:	31 c0                	xor    %eax,%eax
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
	      __x.size())
  4012d9:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4012e0:	48 89 c7             	mov    %rax,%rdi
  4012e3:	e8 7c 05 00 00       	callq  401864 <_ZNKSt5dequeIP8LinknodeSaIS1_EE4sizeEv>
  4012e8:	48 89 c3             	mov    %rax,%rbx
       *
       *  The newly-created %deque uses a copy of the allocation object used
       *  by @a __x.
       */
      deque(const deque& __x)
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
  4012eb:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  4012f2:	48 89 c7             	mov    %rax,%rdi
  4012f5:	e8 5c 05 00 00       	callq  401856 <_ZNKSt11_Deque_baseIP8LinknodeSaIS1_EE19_M_get_Tp_allocatorEv>
  4012fa:	48 89 c7             	mov    %rax,%rdi
  4012fd:	e8 46 05 00 00       	callq  401848 <_ZN9__gnu_cxx14__alloc_traitsISaIP8LinknodeEE17_S_select_on_copyERKS3_>
  401302:	48 89 c1             	mov    %rax,%rcx
	      __x.size())
  401305:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40130c:	48 89 da             	mov    %rbx,%rdx
  40130f:	48 89 ce             	mov    %rcx,%rsi
  401312:	48 89 c7             	mov    %rax,%rdi
  401315:	e8 74 05 00 00       	callq  40188e <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EEC1ERKS2_m>
      { std::__uninitialized_copy_a(__x.begin(), __x.end(), 
				    this->_M_impl._M_start,
				    _M_get_Tp_allocator()); }
  40131a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  401321:	48 89 c7             	mov    %rax,%rdi
  401324:	e8 ed fe ff ff       	callq  401216 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE19_M_get_Tp_allocatorEv>
  401329:	48 89 c3             	mov    %rax,%rbx
       *  by @a __x.
       */
      deque(const deque& __x)
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
	      __x.size())
      { std::__uninitialized_copy_a(__x.begin(), __x.end(), 
  40132c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  401333:	48 8d 50 10          	lea    0x10(%rax),%rdx
  401337:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40133b:	48 89 d6             	mov    %rdx,%rsi
  40133e:	48 89 c7             	mov    %rax,%rdi
  401341:	e8 de fe ff ff       	callq  401224 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1ERKS4_>
  401346:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40134a:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  401351:	48 89 d6             	mov    %rdx,%rsi
  401354:	48 89 c7             	mov    %rax,%rdi
  401357:	e8 be 05 00 00       	callq  40191a <_ZNKSt5dequeIP8LinknodeSaIS1_EE3endEv>
  40135c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  401360:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  401367:	48 89 d6             	mov    %rdx,%rsi
  40136a:	48 89 c7             	mov    %rax,%rdi
  40136d:	e8 7a 05 00 00       	callq  4018ec <_ZNKSt5dequeIP8LinknodeSaIS1_EE5beginEv>
  401372:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  401379:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
  40137d:	ff 75 b8             	pushq  -0x48(%rbp)
  401380:	ff 75 b0             	pushq  -0x50(%rbp)
  401383:	ff 75 a8             	pushq  -0x58(%rbp)
  401386:	ff 75 a0             	pushq  -0x60(%rbp)
  401389:	ff 75 d8             	pushq  -0x28(%rbp)
  40138c:	ff 75 d0             	pushq  -0x30(%rbp)
  40138f:	ff 75 c8             	pushq  -0x38(%rbp)
  401392:	ff 75 c0             	pushq  -0x40(%rbp)
  401395:	48 89 da             	mov    %rbx,%rdx
  401398:	48 89 ce             	mov    %rcx,%rsi
  40139b:	48 89 c7             	mov    %rax,%rdi
  40139e:	e8 a4 05 00 00       	callq  401947 <_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIP8LinknodeRKS2_PS3_ES0_IS2_RS2_PS2_ES2_ET0_T_SB_SA_RSaIT1_E>
  4013a3:	48 83 c4 40          	add    $0x40,%rsp
				    this->_M_impl._M_start,
				    _M_get_Tp_allocator()); }
  4013a7:	90                   	nop
  4013a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4013ac:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4013b3:	00 00 
  4013b5:	74 24                	je     4013db <_ZNSt5dequeIP8LinknodeSaIS1_EEC1ERKS3_+0x12b>
  4013b7:	eb 1d                	jmp    4013d6 <_ZNSt5dequeIP8LinknodeSaIS1_EEC1ERKS3_+0x126>
  4013b9:	48 89 c3             	mov    %rax,%rbx
       *  The newly-created %deque uses a copy of the allocation object used
       *  by @a __x.
       */
      deque(const deque& __x)
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
	      __x.size())
  4013bc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4013c3:	48 89 c7             	mov    %rax,%rdi
  4013c6:	e8 65 fd ff ff       	callq  401130 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EED1Ev>
  4013cb:	48 89 d8             	mov    %rbx,%rax
  4013ce:	48 89 c7             	mov    %rax,%rdi
  4013d1:	e8 5a f7 ff ff       	callq  400b30 <_Unwind_Resume@plt>
      { std::__uninitialized_copy_a(__x.begin(), __x.end(), 
				    this->_M_impl._M_start,
				    _M_get_Tp_allocator()); }
  4013d6:	e8 d5 f6 ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  4013db:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  4013df:	c9                   	leaveq 
  4013e0:	c3                   	retq   
  4013e1:	90                   	nop

00000000004013e2 <_ZNSt5dequeIP8LinknodeSaIS1_EE9push_backERKS1_>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
  4013e2:	55                   	push   %rbp
  4013e3:	48 89 e5             	mov    %rsp,%rbp
  4013e6:	48 83 ec 10          	sub    $0x10,%rsp
  4013ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4013ee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	if (this->_M_impl._M_finish._M_cur
	    != this->_M_impl._M_finish._M_last - 1)
  4013f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4013f6:	48 8b 50 30          	mov    0x30(%rax),%rdx
  4013fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4013fe:	48 8b 40 40          	mov    0x40(%rax),%rax
  401402:	48 83 e8 08          	sub    $0x8,%rax
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
  401406:	48 39 c2             	cmp    %rax,%rdx
  401409:	74 31                	je     40143c <_ZNSt5dequeIP8LinknodeSaIS1_EE9push_backERKS1_+0x5a>
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
  40140b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40140f:	48 8b 48 30          	mov    0x30(%rax),%rcx
  401413:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401417:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40141b:	48 89 ce             	mov    %rcx,%rsi
  40141e:	48 89 c7             	mov    %rax,%rdi
  401421:	e8 a0 05 00 00       	callq  4019c6 <_ZN9__gnu_cxx14__alloc_traitsISaIP8LinknodeEE9constructIS2_EEvRS3_PS2_RKT_>
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
  401426:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40142a:	48 8b 40 30          	mov    0x30(%rax),%rax
  40142e:	48 8d 50 08          	lea    0x8(%rax),%rdx
  401432:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401436:	48 89 50 30          	mov    %rdx,0x30(%rax)
	  }
	else
	  _M_push_back_aux(__x);
      }
  40143a:	eb 13                	jmp    40144f <_ZNSt5dequeIP8LinknodeSaIS1_EE9push_backERKS1_+0x6d>
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
	  }
	else
	  _M_push_back_aux(__x);
  40143c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401444:	48 89 d6             	mov    %rdx,%rsi
  401447:	48 89 c7             	mov    %rax,%rdi
  40144a:	e8 a5 05 00 00       	callq  4019f4 <_ZNSt5dequeIP8LinknodeSaIS1_EE16_M_push_back_auxERKS1_>
      }
  40144f:	90                   	nop
  401450:	c9                   	leaveq 
  401451:	c3                   	retq   

0000000000401452 <_ZNKSt5dequeIP8LinknodeSaIS1_EE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      bool
      empty() const _GLIBCXX_NOEXCEPT
  401452:	55                   	push   %rbp
  401453:	48 89 e5             	mov    %rsp,%rbp
  401456:	48 83 ec 10          	sub    $0x10,%rsp
  40145a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
  40145e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401462:	48 8d 50 10          	lea    0x10(%rax),%rdx
  401466:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40146a:	48 83 c0 30          	add    $0x30,%rax
  40146e:	48 89 d6             	mov    %rdx,%rsi
  401471:	48 89 c7             	mov    %rax,%rdi
  401474:	e8 49 06 00 00       	callq  401ac2 <_ZSteqIP8LinknodeRS1_PS1_EbRKSt15_Deque_iteratorIT_T0_T1_ESA_>
  401479:	c9                   	leaveq 
  40147a:	c3                   	retq   
  40147b:	90                   	nop

000000000040147c <_ZNSt5dequeIP8LinknodeSaIS1_EE4backEv>:
      /**
       *  Returns a read/write reference to the data at the last element of the
       *  %deque.
       */
      reference
      back() _GLIBCXX_NOEXCEPT
  40147c:	55                   	push   %rbp
  40147d:	48 89 e5             	mov    %rsp,%rbp
  401480:	48 83 ec 40          	sub    $0x40,%rsp
  401484:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  401488:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40148f:	00 00 
  401491:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  401495:	31 c0                	xor    %eax,%eax
      {
	iterator __tmp = end();
  401497:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40149b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40149f:	48 89 d6             	mov    %rdx,%rsi
  4014a2:	48 89 c7             	mov    %rax,%rdi
  4014a5:	e8 3e fd ff ff       	callq  4011e8 <_ZNSt5dequeIP8LinknodeSaIS1_EE3endEv>
	--__tmp;
  4014aa:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4014ae:	48 89 c7             	mov    %rax,%rdi
  4014b1:	e8 2e 06 00 00       	callq  401ae4 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EmmEv>
	return *__tmp;
  4014b6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4014ba:	48 89 c7             	mov    %rax,%rdi
  4014bd:	e8 84 06 00 00       	callq  401b46 <_ZNKSt15_Deque_iteratorIP8LinknodeRS1_PS1_EdeEv>
      }
  4014c2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4014c6:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4014cd:	00 00 
  4014cf:	74 05                	je     4014d6 <_ZNSt5dequeIP8LinknodeSaIS1_EE4backEv+0x5a>
  4014d1:	e8 da f5 ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  4014d6:	c9                   	leaveq 
  4014d7:	c3                   	retq   

00000000004014d8 <_ZNSt5dequeIP8LinknodeSaIS1_EE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
  4014d8:	55                   	push   %rbp
  4014d9:	48 89 e5             	mov    %rsp,%rbp
  4014dc:	48 83 ec 10          	sub    $0x10,%rsp
  4014e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	if (this->_M_impl._M_finish._M_cur
	    != this->_M_impl._M_finish._M_first)
  4014e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4014e8:	48 8b 50 30          	mov    0x30(%rax),%rdx
  4014ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4014f0:	48 8b 40 38          	mov    0x38(%rax),%rax
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_finish._M_cur
  4014f4:	48 39 c2             	cmp    %rax,%rdx
  4014f7:	74 2d                	je     401526 <_ZNSt5dequeIP8LinknodeSaIS1_EE8pop_backEv+0x4e>
	    != this->_M_impl._M_finish._M_first)
	  {
	    --this->_M_impl._M_finish._M_cur;
  4014f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4014fd:	48 8b 40 30          	mov    0x30(%rax),%rax
  401501:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  401505:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401509:	48 89 50 30          	mov    %rdx,0x30(%rax)
	    _Alloc_traits::destroy(this->_M_impl,
  40150d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401511:	48 8b 50 30          	mov    0x30(%rax),%rdx
  401515:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401519:	48 89 d6             	mov    %rdx,%rsi
  40151c:	48 89 c7             	mov    %rax,%rdi
  40151f:	e8 33 06 00 00       	callq  401b57 <_ZN9__gnu_cxx14__alloc_traitsISaIP8LinknodeEE7destroyERS3_PS2_>
	                           this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
  401524:	eb 0c                	jmp    401532 <_ZNSt5dequeIP8LinknodeSaIS1_EE8pop_backEv+0x5a>
	    --this->_M_impl._M_finish._M_cur;
	    _Alloc_traits::destroy(this->_M_impl,
	                           this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
  401526:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40152a:	48 89 c7             	mov    %rax,%rdi
  40152d:	e8 4c 06 00 00       	callq  401b7e <_ZNSt5dequeIP8LinknodeSaIS1_EE15_M_pop_back_auxEv>
      }
  401532:	90                   	nop
  401533:	c9                   	leaveq 
  401534:	c3                   	retq   
  401535:	90                   	nop

0000000000401536 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE11_Deque_implC1Ev>:
	_Map_pointer _M_map;
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
  401536:	55                   	push   %rbp
  401537:	48 89 e5             	mov    %rsp,%rbp
  40153a:	48 83 ec 10          	sub    $0x10,%rsp
  40153e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
  401542:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401546:	48 89 c7             	mov    %rax,%rdi
  401549:	e8 ae 06 00 00       	callq  401bfc <_ZNSaIP8LinknodeEC1Ev>
  40154e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401552:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  401559:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40155d:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  401564:	00 
  401565:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401569:	48 83 c0 10          	add    $0x10,%rax
  40156d:	48 89 c7             	mov    %rax,%rdi
  401570:	e8 a3 06 00 00       	callq  401c18 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1Ev>
  401575:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401579:	48 83 c0 30          	add    $0x30,%rax
  40157d:	48 89 c7             	mov    %rax,%rdi
  401580:	e8 93 06 00 00       	callq  401c18 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1Ev>
	{ }
  401585:	90                   	nop
  401586:	c9                   	leaveq 
  401587:	c3                   	retq   

0000000000401588 <_ZNSaIP8LinknodeED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
  401588:	55                   	push   %rbp
  401589:	48 89 e5             	mov    %rsp,%rbp
  40158c:	48 83 ec 10          	sub    $0x10,%rsp
  401590:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401594:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401598:	48 89 c7             	mov    %rax,%rdi
  40159b:	e8 b2 06 00 00       	callq  401c52 <_ZN9__gnu_cxx13new_allocatorIP8LinknodeED1Ev>
  4015a0:	90                   	nop
  4015a1:	c9                   	leaveq 
  4015a2:	c3                   	retq   
  4015a3:	90                   	nop

00000000004015a4 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE17_M_initialize_mapEm>:
   *
   *  The initial underlying memory layout is a bit complicated...
  */
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
  4015a4:	55                   	push   %rbp
  4015a5:	48 89 e5             	mov    %rsp,%rbp
  4015a8:	53                   	push   %rbx
  4015a9:	48 83 ec 48          	sub    $0x48,%rsp
  4015ad:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4015b1:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  4015b5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4015bc:	00 00 
  4015be:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4015c2:	31 c0                	xor    %eax,%eax
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
  4015c4:	bf 08 00 00 00       	mov    $0x8,%edi
  4015c9:	e8 4f f9 ff ff       	callq  400f1d <_ZSt16__deque_buf_sizem>
  4015ce:	48 89 c3             	mov    %rax,%rbx
				  + 1);
  4015d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4015d5:	ba 00 00 00 00       	mov    $0x0,%edx
  4015da:	48 f7 f3             	div    %rbx
  4015dd:	48 83 c0 01          	add    $0x1,%rax
  4015e1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
					   size_t(__num_nodes + 2));
  4015e5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4015e9:	48 83 c0 02          	add    $0x2,%rax
  4015ed:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4015f1:	48 c7 45 c0 08 00 00 	movq   $0x8,-0x40(%rbp)
  4015f8:	00 
  4015f9:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  4015fd:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  401601:	48 89 d6             	mov    %rdx,%rsi
  401604:	48 89 c7             	mov    %rax,%rdi
  401607:	e8 51 06 00 00       	callq  401c5d <_ZSt3maxImERKT_S2_S2_>
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
  40160c:	48 8b 10             	mov    (%rax),%rdx
  40160f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401613:	48 89 50 08          	mov    %rdx,0x8(%rax)
					   size_t(__num_nodes + 2));
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
  401617:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40161b:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40161f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401623:	48 89 d6             	mov    %rdx,%rsi
  401626:	48 89 c7             	mov    %rax,%rdi
  401629:	e8 5a 06 00 00       	callq  401c88 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE15_M_allocate_mapEm>
  40162e:	48 89 c2             	mov    %rax,%rdx
  401631:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401635:	48 89 10             	mov    %rdx,(%rax)
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
  401638:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40163c:	48 8b 10             	mov    (%rax),%rdx
  40163f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401643:	48 8b 40 08          	mov    0x8(%rax),%rax
  401647:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
  40164b:	48 d1 e8             	shr    %rax
  40164e:	48 c1 e0 03          	shl    $0x3,%rax
  401652:	48 01 d0             	add    %rdx,%rax
  401655:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      _Map_pointer __nfinish = __nstart + __num_nodes;
  401659:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40165d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  401664:	00 
  401665:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401669:	48 01 d0             	add    %rdx,%rax
  40166c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

      __try
	{ _M_create_nodes(__nstart, __nfinish); }
  401670:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  401674:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  401678:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40167c:	48 89 ce             	mov    %rcx,%rsi
  40167f:	48 89 c7             	mov    %rax,%rdi
  401682:	e8 91 06 00 00       	callq  401d18 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE15_M_create_nodesEPPS1_S5_>
	  this->_M_impl._M_map = _Map_pointer();
	  this->_M_impl._M_map_size = 0;
	  __throw_exception_again;
	}

      this->_M_impl._M_start._M_set_node(__nstart);
  401687:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40168b:	48 8d 50 10          	lea    0x10(%rax),%rdx
  40168f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401693:	48 89 c6             	mov    %rax,%rsi
  401696:	48 89 d7             	mov    %rdx,%rdi
  401699:	e8 fe 06 00 00       	callq  401d9c <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
  40169e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4016a2:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  4016a6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4016aa:	48 83 c0 30          	add    $0x30,%rax
  4016ae:	48 89 d6             	mov    %rdx,%rsi
  4016b1:	48 89 c7             	mov    %rax,%rdi
  4016b4:	e8 e3 06 00 00       	callq  401d9c <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
  4016b9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4016bd:	48 8b 50 18          	mov    0x18(%rax),%rdx
  4016c1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4016c5:	48 89 50 10          	mov    %rdx,0x10(%rax)
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
					+ __num_elements
  4016c9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4016cd:	48 8b 58 38          	mov    0x38(%rax),%rbx
					% __deque_buf_size(sizeof(_Tp)));
  4016d1:	bf 08 00 00 00       	mov    $0x8,%edi
  4016d6:	e8 42 f8 ff ff       	callq  400f1d <_ZSt16__deque_buf_sizem>
  4016db:	48 89 c1             	mov    %rax,%rcx

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
					+ __num_elements
  4016de:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4016e2:	ba 00 00 00 00       	mov    $0x0,%edx
  4016e7:	48 f7 f1             	div    %rcx
  4016ea:	48 89 d0             	mov    %rdx,%rax
  4016ed:	48 c1 e0 03          	shl    $0x3,%rax
  4016f1:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
  4016f5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4016f9:	48 89 50 30          	mov    %rdx,0x30(%rax)
					+ __num_elements
					% __deque_buf_size(sizeof(_Tp)));
    }
  4016fd:	90                   	nop
  4016fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401702:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  401709:	00 00 
  40170b:	74 5c                	je     401769 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE17_M_initialize_mapEm+0x1c5>
  40170d:	eb 55                	jmp    401764 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE17_M_initialize_mapEm+0x1c0>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
      _Map_pointer __nfinish = __nstart + __num_nodes;

      __try
	{ _M_create_nodes(__nstart, __nfinish); }
      __catch(...)
  40170f:	48 89 c7             	mov    %rax,%rdi
  401712:	e8 e9 f3 ff ff       	callq  400b00 <__cxa_begin_catch@plt>
	{
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
  401717:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40171b:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40171f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401723:	48 8b 08             	mov    (%rax),%rcx
  401726:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40172a:	48 89 ce             	mov    %rcx,%rsi
  40172d:	48 89 c7             	mov    %rax,%rdi
  401730:	e8 81 00 00 00       	callq  4017b6 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE17_M_deallocate_mapEPPS1_m>
	  this->_M_impl._M_map = _Map_pointer();
  401735:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401739:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	  this->_M_impl._M_map_size = 0;
  401740:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401744:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  40174b:	00 
	  __throw_exception_again;
  40174c:	e8 df f2 ff ff       	callq  400a30 <__cxa_rethrow@plt>
  401751:	48 89 c3             	mov    %rax,%rbx
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
      _Map_pointer __nfinish = __nstart + __num_nodes;

      __try
	{ _M_create_nodes(__nstart, __nfinish); }
      __catch(...)
  401754:	e8 77 f3 ff ff       	callq  400ad0 <__cxa_end_catch@plt>
  401759:	48 89 d8             	mov    %rbx,%rax
  40175c:	48 89 c7             	mov    %rax,%rdi
  40175f:	e8 cc f3 ff ff       	callq  400b30 <_Unwind_Resume@plt>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
					+ __num_elements
					% __deque_buf_size(sizeof(_Tp)));
    }
  401764:	e8 47 f3 ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  401769:	48 83 c4 48          	add    $0x48,%rsp
  40176d:	5b                   	pop    %rbx
  40176e:	5d                   	pop    %rbp
  40176f:	c3                   	retq   

0000000000401770 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
	}
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
  401770:	55                   	push   %rbp
  401771:	48 89 e5             	mov    %rsp,%rbp
  401774:	48 83 ec 30          	sub    $0x30,%rsp
  401778:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40177c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  401780:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
  401784:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401788:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40178c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401790:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  401794:	73 1d                	jae    4017b3 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x43>
	_M_deallocate_node(*__n);
  401796:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40179a:	48 8b 10             	mov    (%rax),%rdx
  40179d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4017a1:	48 89 d6             	mov    %rdx,%rsi
  4017a4:	48 89 c7             	mov    %rax,%rdi
  4017a7:	e8 42 06 00 00       	callq  401dee <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE18_M_deallocate_nodeEPS1_>
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
  4017ac:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
  4017b1:	eb d9                	jmp    40178c <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x1c>
	_M_deallocate_node(*__n);
    }
  4017b3:	90                   	nop
  4017b4:	c9                   	leaveq 
  4017b5:	c3                   	retq   

00000000004017b6 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE17_M_deallocate_mapEPPS1_m>:
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
	return _Map_alloc_traits::allocate(__map_alloc, __n);
      }

      void
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
  4017b6:	55                   	push   %rbp
  4017b7:	48 89 e5             	mov    %rsp,%rbp
  4017ba:	53                   	push   %rbx
  4017bb:	48 83 ec 38          	sub    $0x38,%rsp
  4017bf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  4017c3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  4017c7:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  4017cb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4017d2:	00 00 
  4017d4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4017d8:	31 c0                	xor    %eax,%eax
      {
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  4017da:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  4017de:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4017e2:	48 89 d6             	mov    %rdx,%rsi
  4017e5:	48 89 c7             	mov    %rax,%rdi
  4017e8:	e8 35 06 00 00       	callq  401e22 <_ZNKSt11_Deque_baseIP8LinknodeSaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
  4017ed:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  4017f1:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  4017f5:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  4017f9:	48 89 ce             	mov    %rcx,%rsi
  4017fc:	48 89 c7             	mov    %rax,%rdi
  4017ff:	e8 6d 06 00 00       	callq  401e71 <_ZN9__gnu_cxx14__alloc_traitsISaIPP8LinknodeEE10deallocateERS4_PS3_m>
      }

      void
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
      {
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  401804:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  401808:	48 89 c7             	mov    %rax,%rdi
  40180b:	e8 46 06 00 00       	callq  401e56 <_ZNSaIPP8LinknodeED1Ev>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
      }
  401810:	90                   	nop
  401811:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401815:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  40181c:	00 00 
  40181e:	74 21                	je     401841 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE17_M_deallocate_mapEPPS1_m+0x8b>
  401820:	eb 1a                	jmp    40183c <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE17_M_deallocate_mapEPPS1_m+0x86>
  401822:	48 89 c3             	mov    %rax,%rbx
      }

      void
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
      {
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  401825:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  401829:	48 89 c7             	mov    %rax,%rdi
  40182c:	e8 25 06 00 00       	callq  401e56 <_ZNSaIPP8LinknodeED1Ev>
  401831:	48 89 d8             	mov    %rbx,%rax
  401834:	48 89 c7             	mov    %rax,%rdi
  401837:	e8 f4 f2 ff ff       	callq  400b30 <_Unwind_Resume@plt>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
      }
  40183c:	e8 6f f2 ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  401841:	48 83 c4 38          	add    $0x38,%rsp
  401845:	5b                   	pop    %rbx
  401846:	5d                   	pop    %rbp
  401847:	c3                   	retq   

0000000000401848 <_ZN9__gnu_cxx14__alloc_traitsISaIP8LinknodeEE17_S_select_on_copyERKS3_>:
    { __a.destroy(__p); }

    static size_type max_size(const _Alloc& __a)
    { return __a.max_size(); }

    static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }
  401848:	55                   	push   %rbp
  401849:	48 89 e5             	mov    %rsp,%rbp
  40184c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401850:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401854:	5d                   	pop    %rbp
  401855:	c3                   	retq   

0000000000401856 <_ZNKSt11_Deque_baseIP8LinknodeSaIS1_EE19_M_get_Tp_allocatorEv>:
      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
  401856:	55                   	push   %rbp
  401857:	48 89 e5             	mov    %rsp,%rbp
  40185a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  40185e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401862:	5d                   	pop    %rbp
  401863:	c3                   	retq   

0000000000401864 <_ZNKSt5dequeIP8LinknodeSaIS1_EE4sizeEv>:
#endif

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
  401864:	55                   	push   %rbp
  401865:	48 89 e5             	mov    %rsp,%rbp
  401868:	48 83 ec 10          	sub    $0x10,%rsp
  40186c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
  401870:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401874:	48 8d 50 10          	lea    0x10(%rax),%rdx
  401878:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40187c:	48 83 c0 30          	add    $0x30,%rax
  401880:	48 89 d6             	mov    %rdx,%rsi
  401883:	48 89 c7             	mov    %rax,%rdi
  401886:	e8 14 06 00 00       	callq  401e9f <_ZStmiIP8LinknodeRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
  40188b:	c9                   	leaveq 
  40188c:	c3                   	retq   
  40188d:	90                   	nop

000000000040188e <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EEC1ERKS2_m>:

      _Deque_base(size_t __num_elements)
      : _M_impl()
      { _M_initialize_map(__num_elements); }

      _Deque_base(const allocator_type& __a, size_t __num_elements)
  40188e:	55                   	push   %rbp
  40188f:	48 89 e5             	mov    %rsp,%rbp
  401892:	53                   	push   %rbx
  401893:	48 83 ec 28          	sub    $0x28,%rsp
  401897:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40189b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40189f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
  4018a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4018a7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4018ab:	48 89 d6             	mov    %rdx,%rsi
  4018ae:	48 89 c7             	mov    %rax,%rdi
  4018b1:	e8 66 06 00 00       	callq  401f1c <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE11_Deque_implC1ERKS2_>
      { _M_initialize_map(__num_elements); }
  4018b6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4018ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4018be:	48 89 d6             	mov    %rdx,%rsi
  4018c1:	48 89 c7             	mov    %rax,%rdi
  4018c4:	e8 db fc ff ff       	callq  4015a4 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE17_M_initialize_mapEm>
  4018c9:	eb 1a                	jmp    4018e5 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EEC1ERKS2_m+0x57>
  4018cb:	48 89 c3             	mov    %rax,%rbx
      _Deque_base(size_t __num_elements)
      : _M_impl()
      { _M_initialize_map(__num_elements); }

      _Deque_base(const allocator_type& __a, size_t __num_elements)
      : _M_impl(__a)
  4018ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4018d2:	48 89 c7             	mov    %rax,%rdi
  4018d5:	e8 ec f7 ff ff       	callq  4010c6 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE11_Deque_implD1Ev>
  4018da:	48 89 d8             	mov    %rbx,%rax
  4018dd:	48 89 c7             	mov    %rax,%rdi
  4018e0:	e8 4b f2 ff ff       	callq  400b30 <_Unwind_Resume@plt>
      { _M_initialize_map(__num_elements); }
  4018e5:	48 83 c4 28          	add    $0x28,%rsp
  4018e9:	5b                   	pop    %rbx
  4018ea:	5d                   	pop    %rbp
  4018eb:	c3                   	retq   

00000000004018ec <_ZNKSt5dequeIP8LinknodeSaIS1_EE5beginEv>:
      /**
       *  Returns a read-only (constant) iterator that points to the first
       *  element in the %deque.  Iteration is done in ordinary element order.
       */
      const_iterator
      begin() const _GLIBCXX_NOEXCEPT
  4018ec:	55                   	push   %rbp
  4018ed:	48 89 e5             	mov    %rsp,%rbp
  4018f0:	48 83 ec 10          	sub    $0x10,%rsp
  4018f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4018f8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return this->_M_impl._M_start; }
  4018fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401900:	48 8d 50 10          	lea    0x10(%rax),%rdx
  401904:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401908:	48 89 d6             	mov    %rdx,%rsi
  40190b:	48 89 c7             	mov    %rax,%rdi
  40190e:	e8 67 06 00 00       	callq  401f7a <_ZNSt15_Deque_iteratorIP8LinknodeRKS1_PS2_EC1ERKS_IS1_RS1_PS1_E>
  401913:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401917:	c9                   	leaveq 
  401918:	c3                   	retq   
  401919:	90                   	nop

000000000040191a <_ZNKSt5dequeIP8LinknodeSaIS1_EE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %deque.  Iteration is done in
       *  ordinary element order.
       */
      const_iterator
      end() const _GLIBCXX_NOEXCEPT
  40191a:	55                   	push   %rbp
  40191b:	48 89 e5             	mov    %rsp,%rbp
  40191e:	48 83 ec 10          	sub    $0x10,%rsp
  401922:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401926:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return this->_M_impl._M_finish; }
  40192a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40192e:	48 8d 50 30          	lea    0x30(%rax),%rdx
  401932:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401936:	48 89 d6             	mov    %rdx,%rsi
  401939:	48 89 c7             	mov    %rax,%rdi
  40193c:	e8 39 06 00 00       	callq  401f7a <_ZNSt15_Deque_iteratorIP8LinknodeRKS1_PS2_EC1ERKS_IS1_RS1_PS1_E>
  401941:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401945:	c9                   	leaveq 
  401946:	c3                   	retq   

0000000000401947 <_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIP8LinknodeRKS2_PS3_ES0_IS2_RS2_PS2_ES2_ET0_T_SB_SA_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
  401947:	55                   	push   %rbp
  401948:	48 89 e5             	mov    %rsp,%rbp
  40194b:	48 83 ec 50          	sub    $0x50,%rsp
  40194f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  401953:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  401957:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  40195b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  401962:	00 00 
  401964:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  401968:	31 c0                	xor    %eax,%eax
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
  40196a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  40196e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  401972:	48 89 d6             	mov    %rdx,%rsi
  401975:	48 89 c7             	mov    %rax,%rdi
  401978:	e8 a7 f8 ff ff       	callq  401224 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1ERKS4_>
  40197d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401981:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  401985:	ff 75 48             	pushq  0x48(%rbp)
  401988:	ff 75 40             	pushq  0x40(%rbp)
  40198b:	ff 75 38             	pushq  0x38(%rbp)
  40198e:	ff 75 30             	pushq  0x30(%rbp)
  401991:	ff 75 28             	pushq  0x28(%rbp)
  401994:	ff 75 20             	pushq  0x20(%rbp)
  401997:	ff 75 18             	pushq  0x18(%rbp)
  40199a:	ff 75 10             	pushq  0x10(%rbp)
  40199d:	48 89 d6             	mov    %rdx,%rsi
  4019a0:	48 89 c7             	mov    %rax,%rdi
  4019a3:	e8 1f 06 00 00       	callq  401fc7 <_ZSt18uninitialized_copyISt15_Deque_iteratorIP8LinknodeRKS2_PS3_ES0_IS2_RS2_PS2_EET0_T_SB_SA_>
  4019a8:	48 83 c4 40          	add    $0x40,%rsp
  4019ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4019b0:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4019b4:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4019bb:	00 00 
  4019bd:	74 05                	je     4019c4 <_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIP8LinknodeRKS2_PS3_ES0_IS2_RS2_PS2_ES2_ET0_T_SB_SA_RSaIT1_E+0x7d>
  4019bf:	e8 ec f0 ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  4019c4:	c9                   	leaveq 
  4019c5:	c3                   	retq   

00000000004019c6 <_ZN9__gnu_cxx14__alloc_traitsISaIP8LinknodeEE9constructIS2_EEvRS3_PS2_RKT_>:

    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
    { __a.deallocate(__p, __n); }

    template<typename _Tp>
      static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)
  4019c6:	55                   	push   %rbp
  4019c7:	48 89 e5             	mov    %rsp,%rbp
  4019ca:	48 83 ec 20          	sub    $0x20,%rsp
  4019ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4019d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4019d6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.construct(__p, __arg); }
  4019da:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4019de:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4019e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4019e6:	48 89 ce             	mov    %rcx,%rsi
  4019e9:	48 89 c7             	mov    %rax,%rdi
  4019ec:	e8 55 06 00 00       	callq  402046 <_ZN9__gnu_cxx13new_allocatorIP8LinknodeE9constructEPS2_RKS2_>
  4019f1:	90                   	nop
  4019f2:	c9                   	leaveq 
  4019f3:	c3                   	retq   

00000000004019f4 <_ZNSt5dequeIP8LinknodeSaIS1_EE16_M_push_back_auxERKS1_>:
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(_Args&&... __args)
#else
      void
      deque<_Tp, _Alloc>::
  4019f4:	55                   	push   %rbp
  4019f5:	48 89 e5             	mov    %rsp,%rbp
  4019f8:	53                   	push   %rbx
  4019f9:	48 83 ec 18          	sub    $0x18,%rsp
  4019fd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401a01:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
  401a05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401a09:	be 01 00 00 00       	mov    $0x1,%esi
  401a0e:	48 89 c7             	mov    %rax,%rdi
  401a11:	e8 68 06 00 00       	callq  40207e <_ZNSt5dequeIP8LinknodeSaIS1_EE22_M_reserve_map_at_backEm>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
  401a16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401a1a:	48 8b 40 48          	mov    0x48(%rax),%rax
  401a1e:	48 8d 58 08          	lea    0x8(%rax),%rbx
  401a22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401a26:	48 89 c7             	mov    %rax,%rdi
  401a29:	e8 b2 06 00 00       	callq  4020e0 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE16_M_allocate_nodeEv>
  401a2e:	48 89 03             	mov    %rax,(%rbx)
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
  401a31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401a35:	48 8b 48 30          	mov    0x30(%rax),%rcx
  401a39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401a3d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  401a41:	48 89 ce             	mov    %rcx,%rsi
  401a44:	48 89 c7             	mov    %rax,%rdi
  401a47:	e8 fa 05 00 00       	callq  402046 <_ZN9__gnu_cxx13new_allocatorIP8LinknodeE9constructEPS2_RKS2_>
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
						+ 1);
  401a4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401a50:	48 8b 40 48          	mov    0x48(%rax),%rax
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
  401a54:	48 8d 50 08          	lea    0x8(%rax),%rdx
  401a58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401a5c:	48 83 c0 30          	add    $0x30,%rax
  401a60:	48 89 d6             	mov    %rdx,%rsi
  401a63:	48 89 c7             	mov    %rax,%rdi
  401a66:	e8 31 03 00 00       	callq  401d9c <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_E11_M_set_nodeEPS3_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
  401a6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401a6f:	48 8b 50 38          	mov    0x38(%rax),%rdx
  401a73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401a77:	48 89 50 30          	mov    %rdx,0x30(%rax)
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
  401a7b:	eb 3e                	jmp    401abb <_ZNSt5dequeIP8LinknodeSaIS1_EE16_M_push_back_auxERKS1_+0xc7>
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
	  }
	__catch(...)
  401a7d:	48 89 c7             	mov    %rax,%rdi
  401a80:	e8 7b f0 ff ff       	callq  400b00 <__cxa_begin_catch@plt>
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
  401a85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401a89:	48 8b 40 48          	mov    0x48(%rax),%rax
  401a8d:	48 83 c0 08          	add    $0x8,%rax
  401a91:	48 8b 10             	mov    (%rax),%rdx
  401a94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401a98:	48 89 d6             	mov    %rdx,%rsi
  401a9b:	48 89 c7             	mov    %rax,%rdi
  401a9e:	e8 4b 03 00 00       	callq  401dee <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE18_M_deallocate_nodeEPS1_>
	    __throw_exception_again;
  401aa3:	e8 88 ef ff ff       	callq  400a30 <__cxa_rethrow@plt>
  401aa8:	48 89 c3             	mov    %rax,%rbx
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
	  }
	__catch(...)
  401aab:	e8 20 f0 ff ff       	callq  400ad0 <__cxa_end_catch@plt>
  401ab0:	48 89 d8             	mov    %rbx,%rax
  401ab3:	48 89 c7             	mov    %rax,%rdi
  401ab6:	e8 75 f0 ff ff       	callq  400b30 <_Unwind_Resume@plt>
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
  401abb:	48 83 c4 18          	add    $0x18,%rsp
  401abf:	5b                   	pop    %rbx
  401ac0:	5d                   	pop    %rbp
  401ac1:	c3                   	retq   

0000000000401ac2 <_ZSteqIP8LinknodeRS1_PS1_EbRKSt15_Deque_iteratorIT_T0_T1_ESA_>:
  // Note: we also provide overloads whose operands are of the same type in
  // order to avoid ambiguous overload resolution when std::rel_ops operators
  // are in scope (for additional details, see libstdc++/3628)
  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
  401ac2:	55                   	push   %rbp
  401ac3:	48 89 e5             	mov    %rsp,%rbp
  401ac6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401aca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    { return __x._M_cur == __y._M_cur; }
  401ace:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401ad2:	48 8b 10             	mov    (%rax),%rdx
  401ad5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401ad9:	48 8b 00             	mov    (%rax),%rax
  401adc:	48 39 c2             	cmp    %rax,%rdx
  401adf:	0f 94 c0             	sete   %al
  401ae2:	5d                   	pop    %rbp
  401ae3:	c3                   	retq   

0000000000401ae4 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EmmEv>:
	++*this;
	return __tmp;
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
  401ae4:	55                   	push   %rbp
  401ae5:	48 89 e5             	mov    %rsp,%rbp
  401ae8:	48 83 ec 10          	sub    $0x10,%rsp
  401aec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	if (_M_cur == _M_first)
  401af0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401af4:	48 8b 10             	mov    (%rax),%rdx
  401af7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401afb:	48 8b 40 08          	mov    0x8(%rax),%rax
  401aff:	48 39 c2             	cmp    %rax,%rdx
  401b02:	75 2a                	jne    401b2e <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EmmEv+0x4a>
	  {
	    _M_set_node(_M_node - 1);
  401b04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401b08:	48 8b 40 18          	mov    0x18(%rax),%rax
  401b0c:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  401b10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401b14:	48 89 d6             	mov    %rdx,%rsi
  401b17:	48 89 c7             	mov    %rax,%rdi
  401b1a:	e8 7d 02 00 00       	callq  401d9c <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_last;
  401b1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401b23:	48 8b 50 10          	mov    0x10(%rax),%rdx
  401b27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401b2b:	48 89 10             	mov    %rdx,(%rax)
	  }
	--_M_cur;
  401b2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401b32:	48 8b 00             	mov    (%rax),%rax
  401b35:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  401b39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401b3d:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  401b40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  401b44:	c9                   	leaveq 
  401b45:	c3                   	retq   

0000000000401b46 <_ZNKSt15_Deque_iteratorIP8LinknodeRS1_PS1_EdeEv>:
      iterator
      _M_const_cast() const _GLIBCXX_NOEXCEPT
      { return iterator(_M_cur, _M_node); }

      reference
      operator*() const _GLIBCXX_NOEXCEPT
  401b46:	55                   	push   %rbp
  401b47:	48 89 e5             	mov    %rsp,%rbp
  401b4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_cur; }
  401b4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401b52:	48 8b 00             	mov    (%rax),%rax
  401b55:	5d                   	pop    %rbp
  401b56:	c3                   	retq   

0000000000401b57 <_ZN9__gnu_cxx14__alloc_traitsISaIP8LinknodeEE7destroyERS3_PS2_>:

    static void destroy(_Alloc& __a, pointer __p)
  401b57:	55                   	push   %rbp
  401b58:	48 89 e5             	mov    %rsp,%rbp
  401b5b:	48 83 ec 10          	sub    $0x10,%rsp
  401b5f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401b63:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { __a.destroy(__p); }
  401b67:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401b6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401b6f:	48 89 d6             	mov    %rdx,%rsi
  401b72:	48 89 c7             	mov    %rax,%rdi
  401b75:	e8 90 05 00 00       	callq  40210a <_ZN9__gnu_cxx13new_allocatorIP8LinknodeE7destroyEPS2_>
  401b7a:	90                   	nop
  401b7b:	c9                   	leaveq 
  401b7c:	c3                   	retq   
  401b7d:	90                   	nop

0000000000401b7e <_ZNSt5dequeIP8LinknodeSaIS1_EE15_M_pop_back_auxEv>:
	  }
      }

  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
  401b7e:	55                   	push   %rbp
  401b7f:	48 89 e5             	mov    %rsp,%rbp
  401b82:	53                   	push   %rbx
  401b83:	48 83 ec 18          	sub    $0x18,%rsp
  401b87:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
  401b8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401b8f:	48 8b 50 38          	mov    0x38(%rax),%rdx
  401b93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401b97:	48 89 d6             	mov    %rdx,%rsi
  401b9a:	48 89 c7             	mov    %rax,%rdi
  401b9d:	e8 4c 02 00 00       	callq  401dee <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
  401ba2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401ba6:	48 8b 40 48          	mov    0x48(%rax),%rax
  401baa:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  401bae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401bb2:	48 83 c0 30          	add    $0x30,%rax
  401bb6:	48 89 d6             	mov    %rdx,%rsi
  401bb9:	48 89 c7             	mov    %rax,%rdi
  401bbc:	e8 db 01 00 00       	callq  401d9c <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
  401bc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401bc5:	48 8b 40 40          	mov    0x40(%rax),%rax
  401bc9:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  401bcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401bd1:	48 89 50 30          	mov    %rdx,0x30(%rax)
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
  401bd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401bd9:	48 8b 58 30          	mov    0x30(%rax),%rbx
  401bdd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401be1:	48 89 c7             	mov    %rax,%rdi
  401be4:	e8 2d f6 ff ff       	callq  401216 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE19_M_get_Tp_allocatorEv>
  401be9:	48 89 de             	mov    %rbx,%rsi
  401bec:	48 89 c7             	mov    %rax,%rdi
  401bef:	e8 63 ff ff ff       	callq  401b57 <_ZN9__gnu_cxx14__alloc_traitsISaIP8LinknodeEE7destroyERS3_PS2_>
			     this->_M_impl._M_finish._M_cur);
    }
  401bf4:	90                   	nop
  401bf5:	48 83 c4 18          	add    $0x18,%rsp
  401bf9:	5b                   	pop    %rbx
  401bfa:	5d                   	pop    %rbp
  401bfb:	c3                   	retq   

0000000000401bfc <_ZNSaIP8LinknodeEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. std::allocator propagate_on_container_move_assignment
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }
  401bfc:	55                   	push   %rbp
  401bfd:	48 89 e5             	mov    %rsp,%rbp
  401c00:	48 83 ec 10          	sub    $0x10,%rsp
  401c04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401c08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c0c:	48 89 c7             	mov    %rax,%rdi
  401c0f:	e8 06 05 00 00       	callq  40211a <_ZN9__gnu_cxx13new_allocatorIP8LinknodeEC1Ev>
  401c14:	90                   	nop
  401c15:	c9                   	leaveq 
  401c16:	c3                   	retq   
  401c17:	90                   	nop

0000000000401c18 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1Ev>:

      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
  401c18:	55                   	push   %rbp
  401c19:	48 89 e5             	mov    %rsp,%rbp
  401c1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
  401c20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c24:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  401c2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c2f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  401c36:	00 
  401c37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c3b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  401c42:	00 
  401c43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c47:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  401c4e:	00 
  401c4f:	90                   	nop
  401c50:	5d                   	pop    %rbp
  401c51:	c3                   	retq   

0000000000401c52 <_ZN9__gnu_cxx13new_allocatorIP8LinknodeED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  401c52:	55                   	push   %rbp
  401c53:	48 89 e5             	mov    %rsp,%rbp
  401c56:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401c5a:	90                   	nop
  401c5b:	5d                   	pop    %rbp
  401c5c:	c3                   	retq   

0000000000401c5d <_ZSt3maxImERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
  401c5d:	55                   	push   %rbp
  401c5e:	48 89 e5             	mov    %rsp,%rbp
  401c61:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401c65:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
  401c69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c6d:	48 8b 10             	mov    (%rax),%rdx
  401c70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401c74:	48 8b 00             	mov    (%rax),%rax
  401c77:	48 39 c2             	cmp    %rax,%rdx
  401c7a:	73 06                	jae    401c82 <_ZSt3maxImERKT_S2_S2_+0x25>
	return __b;
  401c7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401c80:	eb 04                	jmp    401c86 <_ZSt3maxImERKT_S2_S2_+0x29>
      return __a;
  401c82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  401c86:	5d                   	pop    %rbp
  401c87:	c3                   	retq   

0000000000401c88 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE15_M_allocate_mapEm>:
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
      }

      _Map_pointer
      _M_allocate_map(size_t __n)
  401c88:	55                   	push   %rbp
  401c89:	48 89 e5             	mov    %rsp,%rbp
  401c8c:	53                   	push   %rbx
  401c8d:	48 83 ec 28          	sub    $0x28,%rsp
  401c91:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  401c95:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  401c99:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  401ca0:	00 00 
  401ca2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  401ca6:	31 c0                	xor    %eax,%eax
      {
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  401ca8:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  401cac:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  401cb0:	48 89 d6             	mov    %rdx,%rsi
  401cb3:	48 89 c7             	mov    %rax,%rdi
  401cb6:	e8 67 01 00 00       	callq  401e22 <_ZNKSt11_Deque_baseIP8LinknodeSaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
  401cbb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  401cbf:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  401cc3:	48 89 d6             	mov    %rdx,%rsi
  401cc6:	48 89 c7             	mov    %rax,%rdi
  401cc9:	e8 57 04 00 00       	callq  402125 <_ZN9__gnu_cxx14__alloc_traitsISaIPP8LinknodeEE8allocateERS4_m>
  401cce:	48 89 c3             	mov    %rax,%rbx
      }

      _Map_pointer
      _M_allocate_map(size_t __n)
      {
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  401cd1:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  401cd5:	48 89 c7             	mov    %rax,%rdi
  401cd8:	e8 79 01 00 00       	callq  401e56 <_ZNSaIPP8LinknodeED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
  401cdd:	48 89 d8             	mov    %rbx,%rax
      }
  401ce0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  401ce4:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  401ceb:	00 00 
  401ced:	74 21                	je     401d10 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE15_M_allocate_mapEm+0x88>
  401cef:	eb 1a                	jmp    401d0b <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE15_M_allocate_mapEm+0x83>
  401cf1:	48 89 c3             	mov    %rax,%rbx
      }

      _Map_pointer
      _M_allocate_map(size_t __n)
      {
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  401cf4:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
  401cf8:	48 89 c7             	mov    %rax,%rdi
  401cfb:	e8 56 01 00 00       	callq  401e56 <_ZNSaIPP8LinknodeED1Ev>
  401d00:	48 89 d8             	mov    %rbx,%rax
  401d03:	48 89 c7             	mov    %rax,%rdi
  401d06:	e8 25 ee ff ff       	callq  400b30 <_Unwind_Resume@plt>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
      }
  401d0b:	e8 a0 ed ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  401d10:	48 83 c4 28          	add    $0x28,%rsp
  401d14:	5b                   	pop    %rbx
  401d15:	5d                   	pop    %rbp
  401d16:	c3                   	retq   
  401d17:	90                   	nop

0000000000401d18 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE15_M_create_nodesEPPS1_S5_>:
					% __deque_buf_size(sizeof(_Tp)));
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
  401d18:	55                   	push   %rbp
  401d19:	48 89 e5             	mov    %rsp,%rbp
  401d1c:	53                   	push   %rbx
  401d1d:	48 83 ec 38          	sub    $0x38,%rsp
  401d21:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  401d25:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  401d29:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
  401d2d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401d31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  401d35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401d39:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  401d3d:	73 54                	jae    401d93 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE15_M_create_nodesEPPS1_S5_+0x7b>
	    *__cur = this->_M_allocate_node();
  401d3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401d43:	48 89 c7             	mov    %rax,%rdi
  401d46:	e8 95 03 00 00       	callq  4020e0 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE16_M_allocate_nodeEv>
  401d4b:	48 89 c2             	mov    %rax,%rdx
  401d4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401d52:	48 89 10             	mov    %rdx,(%rax)
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
  401d55:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  401d5a:	eb d9                	jmp    401d35 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE15_M_create_nodesEPPS1_S5_+0x1d>
	    *__cur = this->_M_allocate_node();
	}
      __catch(...)
  401d5c:	48 89 c7             	mov    %rax,%rdi
  401d5f:	e8 9c ed ff ff       	callq  400b00 <__cxa_begin_catch@plt>
	{
	  _M_destroy_nodes(__nstart, __cur);
  401d64:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401d68:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  401d6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401d70:	48 89 ce             	mov    %rcx,%rsi
  401d73:	48 89 c7             	mov    %rax,%rdi
  401d76:	e8 f5 f9 ff ff       	callq  401770 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  __throw_exception_again;
  401d7b:	e8 b0 ec ff ff       	callq  400a30 <__cxa_rethrow@plt>
  401d80:	48 89 c3             	mov    %rax,%rbx
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
	}
      __catch(...)
  401d83:	e8 48 ed ff ff       	callq  400ad0 <__cxa_end_catch@plt>
  401d88:	48 89 d8             	mov    %rbx,%rax
  401d8b:	48 89 c7             	mov    %rax,%rdi
  401d8e:	e8 9d ed ff ff       	callq  400b30 <_Unwind_Resume@plt>
	{
	  _M_destroy_nodes(__nstart, __cur);
	  __throw_exception_again;
	}
    }
  401d93:	90                   	nop
  401d94:	48 83 c4 38          	add    $0x38,%rsp
  401d98:	5b                   	pop    %rbx
  401d99:	5d                   	pop    %rbp
  401d9a:	c3                   	retq   
  401d9b:	90                   	nop

0000000000401d9c <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_E11_M_set_nodeEPS3_>:
       *  Prepares to traverse new_node.  Sets everything except
       *  _M_cur, which should therefore be set by the caller
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
  401d9c:	55                   	push   %rbp
  401d9d:	48 89 e5             	mov    %rsp,%rbp
  401da0:	53                   	push   %rbx
  401da1:	48 83 ec 18          	sub    $0x18,%rsp
  401da5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401da9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      {
	_M_node = __new_node;
  401dad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401db1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  401db5:	48 89 50 18          	mov    %rdx,0x18(%rax)
	_M_first = *__new_node;
  401db9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401dbd:	48 8b 10             	mov    (%rax),%rdx
  401dc0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401dc4:	48 89 50 08          	mov    %rdx,0x8(%rax)
	_M_last = _M_first + difference_type(_S_buffer_size());
  401dc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401dcc:	48 8b 58 08          	mov    0x8(%rax),%rbx
  401dd0:	e8 7a 03 00 00       	callq  40214f <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_E14_S_buffer_sizeEv>
  401dd5:	48 c1 e0 03          	shl    $0x3,%rax
  401dd9:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  401ddd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401de1:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
  401de5:	90                   	nop
  401de6:	48 83 c4 18          	add    $0x18,%rsp
  401dea:	5b                   	pop    %rbx
  401deb:	5d                   	pop    %rbp
  401dec:	c3                   	retq   
  401ded:	90                   	nop

0000000000401dee <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE18_M_deallocate_nodeEPS1_>:
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
      }

      void
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
  401dee:	55                   	push   %rbp
  401def:	48 89 e5             	mov    %rsp,%rbp
  401df2:	48 83 ec 10          	sub    $0x10,%rsp
  401df6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401dfa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
  401dfe:	bf 08 00 00 00       	mov    $0x8,%edi
  401e03:	e8 15 f1 ff ff       	callq  400f1d <_ZSt16__deque_buf_sizem>
  401e08:	48 89 c2             	mov    %rax,%rdx
  401e0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401e0f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  401e13:	48 89 ce             	mov    %rcx,%rsi
  401e16:	48 89 c7             	mov    %rax,%rdi
  401e19:	e8 41 03 00 00       	callq  40215f <_ZN9__gnu_cxx14__alloc_traitsISaIP8LinknodeEE10deallocateERS3_PS2_m>
      }
  401e1e:	90                   	nop
  401e1f:	c9                   	leaveq 
  401e20:	c3                   	retq   
  401e21:	90                   	nop

0000000000401e22 <_ZNKSt11_Deque_baseIP8LinknodeSaIS1_EE20_M_get_map_allocatorEv>:
      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      _Map_alloc_type
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
  401e22:	55                   	push   %rbp
  401e23:	48 89 e5             	mov    %rsp,%rbp
  401e26:	48 83 ec 10          	sub    $0x10,%rsp
  401e2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401e2e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
  401e32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401e36:	48 89 c7             	mov    %rax,%rdi
  401e39:	e8 18 fa ff ff       	callq  401856 <_ZNKSt11_Deque_baseIP8LinknodeSaIS1_EE19_M_get_Tp_allocatorEv>
  401e3e:	48 89 c2             	mov    %rax,%rdx
  401e41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401e45:	48 89 d6             	mov    %rdx,%rsi
  401e48:	48 89 c7             	mov    %rax,%rdi
  401e4b:	e8 3e 03 00 00       	callq  40218e <_ZNSaIPP8LinknodeEC1IS0_EERKSaIT_E>
  401e50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401e54:	c9                   	leaveq 
  401e55:	c3                   	retq   

0000000000401e56 <_ZNSaIPP8LinknodeED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
  401e56:	55                   	push   %rbp
  401e57:	48 89 e5             	mov    %rsp,%rbp
  401e5a:	48 83 ec 10          	sub    $0x10,%rsp
  401e5e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401e62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401e66:	48 89 c7             	mov    %rax,%rdi
  401e69:	e8 40 03 00 00       	callq  4021ae <_ZN9__gnu_cxx13new_allocatorIPP8LinknodeED1Ev>
  401e6e:	90                   	nop
  401e6f:	c9                   	leaveq 
  401e70:	c3                   	retq   

0000000000401e71 <_ZN9__gnu_cxx14__alloc_traitsISaIPP8LinknodeEE10deallocateERS4_PS3_m>:

    static pointer
    allocate(_Alloc& __a, size_type __n)
    { return __a.allocate(__n); }

    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
  401e71:	55                   	push   %rbp
  401e72:	48 89 e5             	mov    %rsp,%rbp
  401e75:	48 83 ec 20          	sub    $0x20,%rsp
  401e79:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401e7d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401e81:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { __a.deallocate(__p, __n); }
  401e85:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401e89:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  401e8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401e91:	48 89 ce             	mov    %rcx,%rsi
  401e94:	48 89 c7             	mov    %rax,%rdi
  401e97:	e8 1e 03 00 00       	callq  4021ba <_ZN9__gnu_cxx13new_allocatorIPP8LinknodeE10deallocateEPS3_m>
  401e9c:	90                   	nop
  401e9d:	c9                   	leaveq 
  401e9e:	c3                   	retq   

0000000000401e9f <_ZStmiIP8LinknodeRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
  // According to the resolution of DR179 not only the various comparison
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _Tp, typename _Ref, typename _Ptr>
    inline typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
  401e9f:	55                   	push   %rbp
  401ea0:	48 89 e5             	mov    %rsp,%rbp
  401ea3:	48 83 ec 10          	sub    $0x10,%rsp
  401ea7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401eab:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
  401eaf:	e8 9b 02 00 00       	callq  40214f <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_E14_S_buffer_sizeEv>
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
	+ (__y._M_last - __y._M_cur);
  401eb4:	48 89 c2             	mov    %rax,%rdx
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
  401eb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401ebb:	48 8b 40 18          	mov    0x18(%rax),%rax
	+ (__y._M_last - __y._M_cur);
  401ebf:	48 89 c1             	mov    %rax,%rcx
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
  401ec2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401ec6:	48 8b 40 18          	mov    0x18(%rax),%rax
	+ (__y._M_last - __y._M_cur);
  401eca:	48 29 c1             	sub    %rax,%rcx
  401ecd:	48 89 c8             	mov    %rcx,%rax
  401ed0:	48 c1 f8 03          	sar    $0x3,%rax
  401ed4:	48 83 e8 01          	sub    $0x1,%rax
  401ed8:	48 0f af d0          	imul   %rax,%rdx
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
  401edc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401ee0:	48 8b 00             	mov    (%rax),%rax
	+ (__y._M_last - __y._M_cur);
  401ee3:	48 89 c1             	mov    %rax,%rcx
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
  401ee6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401eea:	48 8b 40 08          	mov    0x8(%rax),%rax
	+ (__y._M_last - __y._M_cur);
  401eee:	48 29 c1             	sub    %rax,%rcx
  401ef1:	48 89 c8             	mov    %rcx,%rax
  401ef4:	48 c1 f8 03          	sar    $0x3,%rax
  401ef8:	48 01 c2             	add    %rax,%rdx
  401efb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401eff:	48 8b 40 10          	mov    0x10(%rax),%rax
  401f03:	48 89 c1             	mov    %rax,%rcx
  401f06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401f0a:	48 8b 00             	mov    (%rax),%rax
  401f0d:	48 29 c1             	sub    %rax,%rcx
  401f10:	48 89 c8             	mov    %rcx,%rax
  401f13:	48 c1 f8 03          	sar    $0x3,%rax
  401f17:	48 01 d0             	add    %rdx,%rax
    }
  401f1a:	c9                   	leaveq 
  401f1b:	c3                   	retq   

0000000000401f1c <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE11_Deque_implC1ERKS2_>:
	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
	{ }

	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
  401f1c:	55                   	push   %rbp
  401f1d:	48 89 e5             	mov    %rsp,%rbp
  401f20:	48 83 ec 10          	sub    $0x10,%rsp
  401f24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401f28:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
  401f2c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401f30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401f34:	48 89 d6             	mov    %rdx,%rsi
  401f37:	48 89 c7             	mov    %rax,%rdi
  401f3a:	e8 9f 02 00 00       	callq  4021de <_ZNSaIP8LinknodeEC1ERKS1_>
  401f3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401f43:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  401f4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401f4e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  401f55:	00 
  401f56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401f5a:	48 83 c0 10          	add    $0x10,%rax
  401f5e:	48 89 c7             	mov    %rax,%rdi
  401f61:	e8 b2 fc ff ff       	callq  401c18 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1Ev>
  401f66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401f6a:	48 83 c0 30          	add    $0x30,%rax
  401f6e:	48 89 c7             	mov    %rax,%rdi
  401f71:	e8 a2 fc ff ff       	callq  401c18 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1Ev>
	{ }
  401f76:	90                   	nop
  401f77:	c9                   	leaveq 
  401f78:	c3                   	retq   
  401f79:	90                   	nop

0000000000401f7a <_ZNSt15_Deque_iteratorIP8LinknodeRKS1_PS2_EC1ERKS_IS1_RS1_PS1_E>:
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
  401f7a:	55                   	push   %rbp
  401f7b:	48 89 e5             	mov    %rsp,%rbp
  401f7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401f82:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
  401f86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401f8a:	48 8b 10             	mov    (%rax),%rdx
  401f8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401f91:	48 89 10             	mov    %rdx,(%rax)
  401f94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401f98:	48 8b 50 08          	mov    0x8(%rax),%rdx
  401f9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401fa0:	48 89 50 08          	mov    %rdx,0x8(%rax)
  401fa4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401fa8:	48 8b 50 10          	mov    0x10(%rax),%rdx
  401fac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401fb0:	48 89 50 10          	mov    %rdx,0x10(%rax)
  401fb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401fb8:	48 8b 50 18          	mov    0x18(%rax),%rdx
  401fbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401fc0:	48 89 50 18          	mov    %rdx,0x18(%rax)
  401fc4:	90                   	nop
  401fc5:	5d                   	pop    %rbp
  401fc6:	c3                   	retq   

0000000000401fc7 <_ZSt18uninitialized_copyISt15_Deque_iteratorIP8LinknodeRKS2_PS3_ES0_IS2_RS2_PS2_EET0_T_SB_SA_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
  401fc7:	55                   	push   %rbp
  401fc8:	48 89 e5             	mov    %rsp,%rbp
  401fcb:	48 83 ec 50          	sub    $0x50,%rsp
  401fcf:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  401fd3:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  401fd7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  401fde:	00 00 
  401fe0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  401fe4:	31 c0                	xor    %eax,%eax
      typedef typename iterator_traits<_InputIterator>::value_type
	_ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
#if __cplusplus < 201103L
      const bool __assignable = true;
  401fe6:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
#endif

      return std::__uninitialized_copy<__is_trivial(_ValueType1)
				       && __is_trivial(_ValueType2)
				       && __assignable>::
	__uninit_copy(__first, __last, __result);
  401fea:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  401fee:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  401ff2:	48 89 d6             	mov    %rdx,%rsi
  401ff5:	48 89 c7             	mov    %rax,%rdi
  401ff8:	e8 27 f2 ff ff       	callq  401224 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1ERKS4_>
  401ffd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402001:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  402005:	ff 75 48             	pushq  0x48(%rbp)
  402008:	ff 75 40             	pushq  0x40(%rbp)
  40200b:	ff 75 38             	pushq  0x38(%rbp)
  40200e:	ff 75 30             	pushq  0x30(%rbp)
  402011:	ff 75 28             	pushq  0x28(%rbp)
  402014:	ff 75 20             	pushq  0x20(%rbp)
  402017:	ff 75 18             	pushq  0x18(%rbp)
  40201a:	ff 75 10             	pushq  0x10(%rbp)
  40201d:	48 89 d6             	mov    %rdx,%rsi
  402020:	48 89 c7             	mov    %rax,%rdi
  402023:	e8 dc 01 00 00       	callq  402204 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt15_Deque_iteratorIP8LinknodeRKS4_PS5_ES2_IS4_RS4_PS4_EEET0_T_SD_SC_>
  402028:	48 83 c4 40          	add    $0x40,%rsp
    }
  40202c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402030:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  402034:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  40203b:	00 00 
  40203d:	74 05                	je     402044 <_ZSt18uninitialized_copyISt15_Deque_iteratorIP8LinknodeRKS2_PS3_ES0_IS2_RS2_PS2_EET0_T_SB_SA_+0x7d>
  40203f:	e8 6c ea ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  402044:	c9                   	leaveq 
  402045:	c3                   	retq   

0000000000402046 <_ZN9__gnu_cxx13new_allocatorIP8LinknodeE9constructEPS2_RKS2_>:
        destroy(_Up* __p) { __p->~_Up(); }
#else
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
  402046:	55                   	push   %rbp
  402047:	48 89 e5             	mov    %rsp,%rbp
  40204a:	48 83 ec 20          	sub    $0x20,%rsp
  40204e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402052:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402056:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::new((void *)__p) _Tp(__val); }
  40205a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40205e:	48 89 c6             	mov    %rax,%rsi
  402061:	bf 08 00 00 00       	mov    $0x8,%edi
  402066:	e8 a0 ee ff ff       	callq  400f0b <_ZnwmPv>
  40206b:	48 85 c0             	test   %rax,%rax
  40206e:	74 0a                	je     40207a <_ZN9__gnu_cxx13new_allocatorIP8LinknodeE9constructEPS2_RKS2_+0x34>
  402070:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  402074:	48 8b 12             	mov    (%rdx),%rdx
  402077:	48 89 10             	mov    %rdx,(%rax)
  40207a:	90                   	nop
  40207b:	c9                   	leaveq 
  40207c:	c3                   	retq   
  40207d:	90                   	nop

000000000040207e <_ZNSt5dequeIP8LinknodeSaIS1_EE22_M_reserve_map_at_backEm>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
  40207e:	55                   	push   %rbp
  40207f:	48 89 e5             	mov    %rsp,%rbp
  402082:	48 83 ec 10          	sub    $0x10,%rsp
  402086:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40208a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
  40208e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402092:	48 8d 48 01          	lea    0x1(%rax),%rcx
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
  402096:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40209a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40209e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4020a2:	48 8b 40 48          	mov    0x48(%rax),%rax
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
  4020a6:	48 89 c6             	mov    %rax,%rsi
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
  4020a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4020ad:	48 8b 00             	mov    (%rax),%rax
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
  4020b0:	48 29 c6             	sub    %rax,%rsi
  4020b3:	48 89 f0             	mov    %rsi,%rax
  4020b6:	48 c1 f8 03          	sar    $0x3,%rax
  4020ba:	48 29 c2             	sub    %rax,%rdx
  4020bd:	48 89 d0             	mov    %rdx,%rax
  4020c0:	48 39 c1             	cmp    %rax,%rcx
  4020c3:	76 18                	jbe    4020dd <_ZNSt5dequeIP8LinknodeSaIS1_EE22_M_reserve_map_at_backEm+0x5f>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, false);
  4020c5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4020c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4020cd:	ba 00 00 00 00       	mov    $0x0,%edx
  4020d2:	48 89 ce             	mov    %rcx,%rsi
  4020d5:	48 89 c7             	mov    %rax,%rdi
  4020d8:	e8 a3 01 00 00       	callq  402280 <_ZNSt5dequeIP8LinknodeSaIS1_EE17_M_reallocate_mapEmb>
      }
  4020dd:	90                   	nop
  4020de:	c9                   	leaveq 
  4020df:	c3                   	retq   

00000000004020e0 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE16_M_allocate_nodeEv>:
      _Map_alloc_type
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
      { return _Map_alloc_type(_M_get_Tp_allocator()); }

      _Ptr
      _M_allocate_node()
  4020e0:	55                   	push   %rbp
  4020e1:	48 89 e5             	mov    %rsp,%rbp
  4020e4:	48 83 ec 10          	sub    $0x10,%rsp
  4020e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { 
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
  4020ec:	bf 08 00 00 00       	mov    $0x8,%edi
  4020f1:	e8 27 ee ff ff       	callq  400f1d <_ZSt16__deque_buf_sizem>
  4020f6:	48 89 c2             	mov    %rax,%rdx
  4020f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4020fd:	48 89 d6             	mov    %rdx,%rsi
  402100:	48 89 c7             	mov    %rax,%rdi
  402103:	e8 9b 03 00 00       	callq  4024a3 <_ZN9__gnu_cxx14__alloc_traitsISaIP8LinknodeEE8allocateERS3_m>
      }
  402108:	c9                   	leaveq 
  402109:	c3                   	retq   

000000000040210a <_ZN9__gnu_cxx13new_allocatorIP8LinknodeE7destroyEPS2_>:

      void 
      destroy(pointer __p) { __p->~_Tp(); }
  40210a:	55                   	push   %rbp
  40210b:	48 89 e5             	mov    %rsp,%rbp
  40210e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402112:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402116:	90                   	nop
  402117:	5d                   	pop    %rbp
  402118:	c3                   	retq   
  402119:	90                   	nop

000000000040211a <_ZN9__gnu_cxx13new_allocatorIP8LinknodeEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40211a:	55                   	push   %rbp
  40211b:	48 89 e5             	mov    %rsp,%rbp
  40211e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402122:	90                   	nop
  402123:	5d                   	pop    %rbp
  402124:	c3                   	retq   

0000000000402125 <_ZN9__gnu_cxx14__alloc_traitsISaIPP8LinknodeEE8allocateERS4_m>:
    typedef typename _Alloc::const_reference        const_reference;
    typedef typename _Alloc::size_type              size_type;
    typedef typename _Alloc::difference_type        difference_type;

    static pointer
    allocate(_Alloc& __a, size_type __n)
  402125:	55                   	push   %rbp
  402126:	48 89 e5             	mov    %rsp,%rbp
  402129:	48 83 ec 10          	sub    $0x10,%rsp
  40212d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402131:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __a.allocate(__n); }
  402135:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  402139:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40213d:	ba 00 00 00 00       	mov    $0x0,%edx
  402142:	48 89 ce             	mov    %rcx,%rsi
  402145:	48 89 c7             	mov    %rax,%rdi
  402148:	e8 81 03 00 00       	callq  4024ce <_ZN9__gnu_cxx13new_allocatorIPP8LinknodeE8allocateEmPKv>
  40214d:	c9                   	leaveq 
  40214e:	c3                   	retq   

000000000040214f <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_E14_S_buffer_sizeEv>:
      typedef __iter<const _Tp>		const_iterator;
      typedef __ptr_to<_Tp>		_Elt_pointer;
      typedef __ptr_to<_Elt_pointer>	_Map_pointer;
#endif

      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
  40214f:	55                   	push   %rbp
  402150:	48 89 e5             	mov    %rsp,%rbp
      { return __deque_buf_size(sizeof(_Tp)); }
  402153:	bf 08 00 00 00       	mov    $0x8,%edi
  402158:	e8 c0 ed ff ff       	callq  400f1d <_ZSt16__deque_buf_sizem>
  40215d:	5d                   	pop    %rbp
  40215e:	c3                   	retq   

000000000040215f <_ZN9__gnu_cxx14__alloc_traitsISaIP8LinknodeEE10deallocateERS3_PS2_m>:

    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
  40215f:	55                   	push   %rbp
  402160:	48 89 e5             	mov    %rsp,%rbp
  402163:	48 83 ec 20          	sub    $0x20,%rsp
  402167:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40216b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40216f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { __a.deallocate(__p, __n); }
  402173:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  402177:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40217b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40217f:	48 89 ce             	mov    %rcx,%rsi
  402182:	48 89 c7             	mov    %rax,%rdi
  402185:	e8 86 03 00 00       	callq  402510 <_ZN9__gnu_cxx13new_allocatorIP8LinknodeE10deallocateEPS2_m>
  40218a:	90                   	nop
  40218b:	c9                   	leaveq 
  40218c:	c3                   	retq   
  40218d:	90                   	nop

000000000040218e <_ZNSaIPP8LinknodeEC1IS0_EERKSaIT_E>:

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }
  40218e:	55                   	push   %rbp
  40218f:	48 89 e5             	mov    %rsp,%rbp
  402192:	48 83 ec 10          	sub    $0x10,%rsp
  402196:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40219a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40219e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4021a2:	48 89 c7             	mov    %rax,%rdi
  4021a5:	e8 8a 03 00 00       	callq  402534 <_ZN9__gnu_cxx13new_allocatorIPP8LinknodeEC1Ev>
  4021aa:	90                   	nop
  4021ab:	c9                   	leaveq 
  4021ac:	c3                   	retq   
  4021ad:	90                   	nop

00000000004021ae <_ZN9__gnu_cxx13new_allocatorIPP8LinknodeED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4021ae:	55                   	push   %rbp
  4021af:	48 89 e5             	mov    %rsp,%rbp
  4021b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4021b6:	90                   	nop
  4021b7:	5d                   	pop    %rbp
  4021b8:	c3                   	retq   
  4021b9:	90                   	nop

00000000004021ba <_ZN9__gnu_cxx13new_allocatorIPP8LinknodeE10deallocateEPS3_m>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
  4021ba:	55                   	push   %rbp
  4021bb:	48 89 e5             	mov    %rsp,%rbp
  4021be:	48 83 ec 20          	sub    $0x20,%rsp
  4021c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4021c6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4021ca:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
  4021ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4021d2:	48 89 c7             	mov    %rax,%rdi
  4021d5:	e8 46 e8 ff ff       	callq  400a20 <_ZdlPv@plt>
  4021da:	90                   	nop
  4021db:	c9                   	leaveq 
  4021dc:	c3                   	retq   
  4021dd:	90                   	nop

00000000004021de <_ZNSaIP8LinknodeEC1ERKS1_>:
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }

      allocator(const allocator& __a) throw()
  4021de:	55                   	push   %rbp
  4021df:	48 89 e5             	mov    %rsp,%rbp
  4021e2:	48 83 ec 10          	sub    $0x10,%rsp
  4021e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4021ea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
  4021ee:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4021f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4021f6:	48 89 d6             	mov    %rdx,%rsi
  4021f9:	48 89 c7             	mov    %rax,%rdi
  4021fc:	e8 3f 03 00 00       	callq  402540 <_ZN9__gnu_cxx13new_allocatorIP8LinknodeEC1ERKS3_>
  402201:	90                   	nop
  402202:	c9                   	leaveq 
  402203:	c3                   	retq   

0000000000402204 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt15_Deque_iteratorIP8LinknodeRKS4_PS5_ES2_IS4_RS4_PS4_EEET0_T_SD_SC_>:
  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
  402204:	55                   	push   %rbp
  402205:	48 89 e5             	mov    %rsp,%rbp
  402208:	48 83 ec 40          	sub    $0x40,%rsp
  40220c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  402210:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  402214:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40221b:	00 00 
  40221d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  402221:	31 c0                	xor    %eax,%eax
		      _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
  402223:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  402227:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40222b:	48 89 d6             	mov    %rdx,%rsi
  40222e:	48 89 c7             	mov    %rax,%rdi
  402231:	e8 ee ef ff ff       	callq  401224 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1ERKS4_>
  402236:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40223a:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  40223e:	ff 75 48             	pushq  0x48(%rbp)
  402241:	ff 75 40             	pushq  0x40(%rbp)
  402244:	ff 75 38             	pushq  0x38(%rbp)
  402247:	ff 75 30             	pushq  0x30(%rbp)
  40224a:	ff 75 28             	pushq  0x28(%rbp)
  40224d:	ff 75 20             	pushq  0x20(%rbp)
  402250:	ff 75 18             	pushq  0x18(%rbp)
  402253:	ff 75 10             	pushq  0x10(%rbp)
  402256:	48 89 d6             	mov    %rdx,%rsi
  402259:	48 89 c7             	mov    %rax,%rdi
  40225c:	e8 ee 02 00 00       	callq  40254f <_ZSt4copyISt15_Deque_iteratorIP8LinknodeRKS2_PS3_ES0_IS2_RS2_PS2_EET0_T_SB_SA_>
  402261:	48 83 c4 40          	add    $0x40,%rsp
  402265:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  402269:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  40226d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  402274:	00 00 
  402276:	74 05                	je     40227d <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt15_Deque_iteratorIP8LinknodeRKS4_PS5_ES2_IS4_RS4_PS4_EEET0_T_SD_SC_+0x79>
  402278:	e8 33 e8 ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  40227d:	c9                   	leaveq 
  40227e:	c3                   	retq   
  40227f:	90                   	nop

0000000000402280 <_ZNSt5dequeIP8LinknodeSaIS1_EE17_M_reallocate_mapEmb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
  402280:	55                   	push   %rbp
  402281:	48 89 e5             	mov    %rsp,%rbp
  402284:	53                   	push   %rbx
  402285:	48 83 ec 58          	sub    $0x58,%rsp
  402289:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  40228d:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  402291:	89 d0                	mov    %edx,%eax
  402293:	88 45 ac             	mov    %al,-0x54(%rbp)
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
  402296:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40229a:	48 8b 40 48          	mov    0x48(%rax),%rax
  40229e:	48 89 c2             	mov    %rax,%rdx
  4022a1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4022a5:	48 8b 40 28          	mov    0x28(%rax),%rax
  4022a9:	48 29 c2             	sub    %rax,%rdx
  4022ac:	48 89 d0             	mov    %rdx,%rax
  4022af:	48 c1 f8 03          	sar    $0x3,%rax
  4022b3:	48 83 c0 01          	add    $0x1,%rax
  4022b7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
  4022bb:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  4022bf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4022c3:	48 01 d0             	add    %rdx,%rax
  4022c6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
  4022ca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4022ce:	48 8b 40 08          	mov    0x8(%rax),%rax
  4022d2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4022d6:	48 01 d2             	add    %rdx,%rdx
  4022d9:	48 39 d0             	cmp    %rdx,%rax
  4022dc:	0f 86 aa 00 00 00    	jbe    40238c <_ZNSt5dequeIP8LinknodeSaIS1_EE17_M_reallocate_mapEmb+0x10c>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
  4022e2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4022e6:	48 8b 10             	mov    (%rax),%rdx
					 - __new_num_nodes) / 2
  4022e9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4022ed:	48 8b 40 08          	mov    0x8(%rax),%rax
	                 + (__add_at_front ? __nodes_to_add : 0);
  4022f1:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  4022f5:	48 d1 e8             	shr    %rax
  4022f8:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  4022ff:	00 
  402300:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  402304:	74 0a                	je     402310 <_ZNSt5dequeIP8LinknodeSaIS1_EE17_M_reallocate_mapEmb+0x90>
  402306:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40230a:	48 c1 e0 03          	shl    $0x3,%rax
  40230e:	eb 05                	jmp    402315 <_ZNSt5dequeIP8LinknodeSaIS1_EE17_M_reallocate_mapEmb+0x95>
  402310:	b8 00 00 00 00       	mov    $0x0,%eax
  402315:	48 01 c8             	add    %rcx,%rax
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
  402318:	48 01 d0             	add    %rdx,%rax
  40231b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
					 - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  if (__new_nstart < this->_M_impl._M_start._M_node)
  40231f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402323:	48 8b 40 28          	mov    0x28(%rax),%rax
  402327:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40232b:	76 28                	jbe    402355 <_ZNSt5dequeIP8LinknodeSaIS1_EE17_M_reallocate_mapEmb+0xd5>
	    std::copy(this->_M_impl._M_start._M_node,
		      this->_M_impl._M_finish._M_node + 1,
  40232d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402331:	48 8b 40 48          	mov    0x48(%rax),%rax
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
  402335:	48 8d 48 08          	lea    0x8(%rax),%rcx
  402339:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40233d:	48 8b 40 28          	mov    0x28(%rax),%rax
  402341:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  402345:	48 89 ce             	mov    %rcx,%rsi
  402348:	48 89 c7             	mov    %rax,%rdi
  40234b:	e8 b2 02 00 00       	callq  402602 <_ZSt4copyIPPP8LinknodeS3_ET0_T_S5_S4_>
  402350:	e9 09 01 00 00       	jmpq   40245e <_ZNSt5dequeIP8LinknodeSaIS1_EE17_M_reallocate_mapEmb+0x1de>
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
  402355:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402359:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  402360:	00 
  402361:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  402365:	48 01 c2             	add    %rax,%rdx
			       this->_M_impl._M_finish._M_node + 1,
  402368:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40236c:	48 8b 40 48          	mov    0x48(%rax),%rax
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
  402370:	48 8d 48 08          	lea    0x8(%rax),%rcx
  402374:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402378:	48 8b 40 28          	mov    0x28(%rax),%rax
  40237c:	48 89 ce             	mov    %rcx,%rsi
  40237f:	48 89 c7             	mov    %rax,%rdi
  402382:	e8 c7 02 00 00       	callq  40264e <_ZSt13copy_backwardIPPP8LinknodeS3_ET0_T_S5_S4_>
  402387:	e9 d2 00 00 00       	jmpq   40245e <_ZNSt5dequeIP8LinknodeSaIS1_EE17_M_reallocate_mapEmb+0x1de>
			       __new_nstart + __old_num_nodes);
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
  40238c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402390:	48 8b 58 08          	mov    0x8(%rax),%rbx
  402394:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402398:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40239c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  4023a0:	48 89 c6             	mov    %rax,%rsi
  4023a3:	48 89 d7             	mov    %rdx,%rdi
  4023a6:	e8 b2 f8 ff ff       	callq  401c5d <_ZSt3maxImERKT_S2_S2_>
						__nodes_to_add) + 2;
  4023ab:	48 8b 00             	mov    (%rax),%rax
  4023ae:	48 01 d8             	add    %rbx,%rax
  4023b1:	48 83 c0 02          	add    $0x2,%rax
  4023b5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
  4023b9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4023bd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4023c1:	48 89 d6             	mov    %rdx,%rsi
  4023c4:	48 89 c7             	mov    %rax,%rdi
  4023c7:	e8 bc f8 ff ff       	callq  401c88 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE15_M_allocate_mapEm>
  4023cc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
  4023d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4023d4:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  4023d8:	48 d1 e8             	shr    %rax
  4023db:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  4023e2:	00 
  4023e3:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  4023e7:	74 0a                	je     4023f3 <_ZNSt5dequeIP8LinknodeSaIS1_EE17_M_reallocate_mapEmb+0x173>
  4023e9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4023ed:	48 c1 e0 03          	shl    $0x3,%rax
  4023f1:	eb 05                	jmp    4023f8 <_ZNSt5dequeIP8LinknodeSaIS1_EE17_M_reallocate_mapEmb+0x178>
  4023f3:	b8 00 00 00 00       	mov    $0x0,%eax
  4023f8:	48 01 c2             	add    %rax,%rdx
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
  4023fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4023ff:	48 01 d0             	add    %rdx,%rax
  402402:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	                 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
		    this->_M_impl._M_finish._M_node + 1,
  402406:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40240a:	48 8b 40 48          	mov    0x48(%rax),%rax
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
  40240e:	48 8d 48 08          	lea    0x8(%rax),%rcx
  402412:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402416:	48 8b 40 28          	mov    0x28(%rax),%rax
  40241a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40241e:	48 89 ce             	mov    %rcx,%rsi
  402421:	48 89 c7             	mov    %rax,%rdi
  402424:	e8 d9 01 00 00       	callq  402602 <_ZSt4copyIPPP8LinknodeS3_ET0_T_S5_S4_>
		    this->_M_impl._M_finish._M_node + 1,
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
  402429:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40242d:	48 8b 50 08          	mov    0x8(%rax),%rdx
  402431:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402435:	48 8b 08             	mov    (%rax),%rcx
  402438:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40243c:	48 89 ce             	mov    %rcx,%rsi
  40243f:	48 89 c7             	mov    %rax,%rdi
  402442:	e8 6f f3 ff ff       	callq  4017b6 <_ZNSt11_Deque_baseIP8LinknodeSaIS1_EE17_M_deallocate_mapEPPS1_m>

	  this->_M_impl._M_map = __new_map;
  402447:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40244b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40244f:	48 89 10             	mov    %rdx,(%rax)
	  this->_M_impl._M_map_size = __new_map_size;
  402452:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402456:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40245a:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
  40245e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402462:	48 8d 50 10          	lea    0x10(%rax),%rdx
  402466:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40246a:	48 89 c6             	mov    %rax,%rsi
  40246d:	48 89 d7             	mov    %rdx,%rdi
  402470:	e8 27 f9 ff ff       	callq  401d9c <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
  402475:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402479:	48 c1 e0 03          	shl    $0x3,%rax
  40247d:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  402481:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  402485:	48 01 c2             	add    %rax,%rdx
  402488:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40248c:	48 83 c0 30          	add    $0x30,%rax
  402490:	48 89 d6             	mov    %rdx,%rsi
  402493:	48 89 c7             	mov    %rax,%rdi
  402496:	e8 01 f9 ff ff       	callq  401d9c <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_E11_M_set_nodeEPS3_>
    }
  40249b:	90                   	nop
  40249c:	48 83 c4 58          	add    $0x58,%rsp
  4024a0:	5b                   	pop    %rbx
  4024a1:	5d                   	pop    %rbp
  4024a2:	c3                   	retq   

00000000004024a3 <_ZN9__gnu_cxx14__alloc_traitsISaIP8LinknodeEE8allocateERS3_m>:
    typedef typename _Alloc::const_reference        const_reference;
    typedef typename _Alloc::size_type              size_type;
    typedef typename _Alloc::difference_type        difference_type;

    static pointer
    allocate(_Alloc& __a, size_type __n)
  4024a3:	55                   	push   %rbp
  4024a4:	48 89 e5             	mov    %rsp,%rbp
  4024a7:	48 83 ec 10          	sub    $0x10,%rsp
  4024ab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4024af:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __a.allocate(__n); }
  4024b3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4024b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4024bb:	ba 00 00 00 00       	mov    $0x0,%edx
  4024c0:	48 89 ce             	mov    %rcx,%rsi
  4024c3:	48 89 c7             	mov    %rax,%rdi
  4024c6:	e8 cf 01 00 00       	callq  40269a <_ZN9__gnu_cxx13new_allocatorIP8LinknodeE8allocateEmPKv>
  4024cb:	c9                   	leaveq 
  4024cc:	c3                   	retq   
  4024cd:	90                   	nop

00000000004024ce <_ZN9__gnu_cxx13new_allocatorIPP8LinknodeE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
  4024ce:	55                   	push   %rbp
  4024cf:	48 89 e5             	mov    %rsp,%rbp
  4024d2:	48 83 ec 20          	sub    $0x20,%rsp
  4024d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4024da:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4024de:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
  4024e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4024e6:	48 89 c7             	mov    %rax,%rdi
  4024e9:	e8 ee 01 00 00       	callq  4026dc <_ZNK9__gnu_cxx13new_allocatorIPP8LinknodeE8max_sizeEv>
  4024ee:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4024f2:	0f 92 c0             	setb   %al
  4024f5:	84 c0                	test   %al,%al
  4024f7:	74 05                	je     4024fe <_ZN9__gnu_cxx13new_allocatorIPP8LinknodeE8allocateEmPKv+0x30>
	  std::__throw_bad_alloc();
  4024f9:	e8 e2 e5 ff ff       	callq  400ae0 <_ZSt17__throw_bad_allocv@plt>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  4024fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402502:	48 c1 e0 03          	shl    $0x3,%rax
  402506:	48 89 c7             	mov    %rax,%rdi
  402509:	e8 12 e6 ff ff       	callq  400b20 <_Znwm@plt>
      }
  40250e:	c9                   	leaveq 
  40250f:	c3                   	retq   

0000000000402510 <_ZN9__gnu_cxx13new_allocatorIP8LinknodeE10deallocateEPS2_m>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
  402510:	55                   	push   %rbp
  402511:	48 89 e5             	mov    %rsp,%rbp
  402514:	48 83 ec 20          	sub    $0x20,%rsp
  402518:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40251c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  402520:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
  402524:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402528:	48 89 c7             	mov    %rax,%rdi
  40252b:	e8 f0 e4 ff ff       	callq  400a20 <_ZdlPv@plt>
  402530:	90                   	nop
  402531:	c9                   	leaveq 
  402532:	c3                   	retq   
  402533:	90                   	nop

0000000000402534 <_ZN9__gnu_cxx13new_allocatorIPP8LinknodeEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  402534:	55                   	push   %rbp
  402535:	48 89 e5             	mov    %rsp,%rbp
  402538:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40253c:	90                   	nop
  40253d:	5d                   	pop    %rbp
  40253e:	c3                   	retq   
  40253f:	90                   	nop

0000000000402540 <_ZN9__gnu_cxx13new_allocatorIP8LinknodeEC1ERKS3_>:

      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  402540:	55                   	push   %rbp
  402541:	48 89 e5             	mov    %rsp,%rbp
  402544:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402548:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40254c:	90                   	nop
  40254d:	5d                   	pop    %rbp
  40254e:	c3                   	retq   

000000000040254f <_ZSt4copyISt15_Deque_iteratorIP8LinknodeRKS2_PS3_ES0_IS2_RS2_PS2_EET0_T_SB_SA_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
  40254f:	55                   	push   %rbp
  402550:	48 89 e5             	mov    %rsp,%rbp
  402553:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  402557:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  40255b:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  40255f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  402566:	00 00 
  402568:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40256c:	31 c0                	xor    %eax,%eax
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
	       __result));
  40256e:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  402572:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  402576:	48 89 d6             	mov    %rdx,%rsi
  402579:	48 89 c7             	mov    %rax,%rdi
  40257c:	e8 a3 ec ff ff       	callq  401224 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1ERKS4_>
  402581:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  402585:	ff 75 48             	pushq  0x48(%rbp)
  402588:	ff 75 40             	pushq  0x40(%rbp)
  40258b:	ff 75 38             	pushq  0x38(%rbp)
  40258e:	ff 75 30             	pushq  0x30(%rbp)
  402591:	48 89 c7             	mov    %rax,%rdi
  402594:	e8 57 01 00 00       	callq  4026f0 <_ZSt12__miter_baseISt15_Deque_iteratorIP8LinknodeRKS2_PS3_EENSt11_Miter_baseIT_E13iterator_typeES8_>
  402599:	48 83 c4 20          	add    $0x20,%rsp
  40259d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4025a1:	ff 75 28             	pushq  0x28(%rbp)
  4025a4:	ff 75 20             	pushq  0x20(%rbp)
  4025a7:	ff 75 18             	pushq  0x18(%rbp)
  4025aa:	ff 75 10             	pushq  0x10(%rbp)
  4025ad:	48 89 c7             	mov    %rax,%rdi
  4025b0:	e8 3b 01 00 00       	callq  4026f0 <_ZSt12__miter_baseISt15_Deque_iteratorIP8LinknodeRKS2_PS3_EENSt11_Miter_baseIT_E13iterator_typeES8_>
  4025b5:	48 83 c4 20          	add    $0x20,%rsp
  4025b9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4025bd:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  4025c1:	ff 75 c8             	pushq  -0x38(%rbp)
  4025c4:	ff 75 c0             	pushq  -0x40(%rbp)
  4025c7:	ff 75 b8             	pushq  -0x48(%rbp)
  4025ca:	ff 75 b0             	pushq  -0x50(%rbp)
  4025cd:	ff 75 e8             	pushq  -0x18(%rbp)
  4025d0:	ff 75 e0             	pushq  -0x20(%rbp)
  4025d3:	ff 75 d8             	pushq  -0x28(%rbp)
  4025d6:	ff 75 d0             	pushq  -0x30(%rbp)
  4025d9:	48 89 d6             	mov    %rdx,%rsi
  4025dc:	48 89 c7             	mov    %rax,%rdi
  4025df:	e8 5d 01 00 00       	callq  402741 <_ZSt14__copy_move_a2ILb0ESt15_Deque_iteratorIP8LinknodeRKS2_PS3_ES0_IS2_RS2_PS2_EET1_T0_SB_SA_>
  4025e4:	48 83 c4 40          	add    $0x40,%rsp
    }
  4025e8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4025ec:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4025f0:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4025f7:	00 00 
  4025f9:	74 05                	je     402600 <_ZSt4copyISt15_Deque_iteratorIP8LinknodeRKS2_PS3_ES0_IS2_RS2_PS2_EET0_T_SB_SA_+0xb1>
  4025fb:	e8 b0 e4 ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  402600:	c9                   	leaveq 
  402601:	c3                   	retq   

0000000000402602 <_ZSt4copyIPPP8LinknodeS3_ET0_T_S5_S4_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
  402602:	55                   	push   %rbp
  402603:	48 89 e5             	mov    %rsp,%rbp
  402606:	53                   	push   %rbx
  402607:	48 83 ec 28          	sub    $0x28,%rsp
  40260b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40260f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  402613:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
  402617:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40261b:	48 89 c7             	mov    %rax,%rdi
  40261e:	e8 fc 01 00 00       	callq  40281f <_ZSt12__miter_baseIPPP8LinknodeENSt11_Miter_baseIT_E13iterator_typeES5_>
  402623:	48 89 c3             	mov    %rax,%rbx
  402626:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40262a:	48 89 c7             	mov    %rax,%rdi
  40262d:	e8 ed 01 00 00       	callq  40281f <_ZSt12__miter_baseIPPP8LinknodeENSt11_Miter_baseIT_E13iterator_typeES5_>
  402632:	48 89 c1             	mov    %rax,%rcx
	       __result));
  402635:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402639:	48 89 c2             	mov    %rax,%rdx
  40263c:	48 89 de             	mov    %rbx,%rsi
  40263f:	48 89 cf             	mov    %rcx,%rdi
  402642:	e8 f2 01 00 00       	callq  402839 <_ZSt14__copy_move_a2ILb0EPPP8LinknodeS3_ET1_T0_S5_S4_>
    }
  402647:	48 83 c4 28          	add    $0x28,%rsp
  40264b:	5b                   	pop    %rbx
  40264c:	5d                   	pop    %rbp
  40264d:	c3                   	retq   

000000000040264e <_ZSt13copy_backwardIPPP8LinknodeS3_ET0_T_S5_S4_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
  40264e:	55                   	push   %rbp
  40264f:	48 89 e5             	mov    %rsp,%rbp
  402652:	53                   	push   %rbx
  402653:	48 83 ec 28          	sub    $0x28,%rsp
  402657:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40265b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40265f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
  402663:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402667:	48 89 c7             	mov    %rax,%rdi
  40266a:	e8 b0 01 00 00       	callq  40281f <_ZSt12__miter_baseIPPP8LinknodeENSt11_Miter_baseIT_E13iterator_typeES5_>
  40266f:	48 89 c3             	mov    %rax,%rbx
  402672:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402676:	48 89 c7             	mov    %rax,%rdi
  402679:	e8 a1 01 00 00       	callq  40281f <_ZSt12__miter_baseIPPP8LinknodeENSt11_Miter_baseIT_E13iterator_typeES5_>
  40267e:	48 89 c1             	mov    %rax,%rcx
	       __result));
  402681:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402685:	48 89 c2             	mov    %rax,%rdx
  402688:	48 89 de             	mov    %rbx,%rsi
  40268b:	48 89 cf             	mov    %rcx,%rdi
  40268e:	e8 fe 01 00 00       	callq  402891 <_ZSt23__copy_move_backward_a2ILb0EPPP8LinknodeS3_ET1_T0_S5_S4_>
    }
  402693:	48 83 c4 28          	add    $0x28,%rsp
  402697:	5b                   	pop    %rbx
  402698:	5d                   	pop    %rbp
  402699:	c3                   	retq   

000000000040269a <_ZN9__gnu_cxx13new_allocatorIP8LinknodeE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
  40269a:	55                   	push   %rbp
  40269b:	48 89 e5             	mov    %rsp,%rbp
  40269e:	48 83 ec 20          	sub    $0x20,%rsp
  4026a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4026a6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4026aa:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
  4026ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4026b2:	48 89 c7             	mov    %rax,%rdi
  4026b5:	e8 30 02 00 00       	callq  4028ea <_ZNK9__gnu_cxx13new_allocatorIP8LinknodeE8max_sizeEv>
  4026ba:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  4026be:	0f 92 c0             	setb   %al
  4026c1:	84 c0                	test   %al,%al
  4026c3:	74 05                	je     4026ca <_ZN9__gnu_cxx13new_allocatorIP8LinknodeE8allocateEmPKv+0x30>
	  std::__throw_bad_alloc();
  4026c5:	e8 16 e4 ff ff       	callq  400ae0 <_ZSt17__throw_bad_allocv@plt>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  4026ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4026ce:	48 c1 e0 03          	shl    $0x3,%rax
  4026d2:	48 89 c7             	mov    %rax,%rdi
  4026d5:	e8 46 e4 ff ff       	callq  400b20 <_Znwm@plt>
      }
  4026da:	c9                   	leaveq 
  4026db:	c3                   	retq   

00000000004026dc <_ZNK9__gnu_cxx13new_allocatorIPP8LinknodeE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
  4026dc:	55                   	push   %rbp
  4026dd:	48 89 e5             	mov    %rsp,%rbp
  4026e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  4026e4:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  4026eb:	ff ff 1f 
  4026ee:	5d                   	pop    %rbp
  4026ef:	c3                   	retq   

00000000004026f0 <_ZSt12__miter_baseISt15_Deque_iteratorIP8LinknodeRKS2_PS3_EENSt11_Miter_baseIT_E13iterator_typeES8_>:
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
  4026f0:	55                   	push   %rbp
  4026f1:	48 89 e5             	mov    %rsp,%rbp
  4026f4:	48 83 ec 20          	sub    $0x20,%rsp
  4026f8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4026fc:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  402703:	00 00 
  402705:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  402709:	31 c0                	xor    %eax,%eax
    { return std::_Miter_base<_Iterator>::_S_base(__it); }
  40270b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40270f:	ff 75 28             	pushq  0x28(%rbp)
  402712:	ff 75 20             	pushq  0x20(%rbp)
  402715:	ff 75 18             	pushq  0x18(%rbp)
  402718:	ff 75 10             	pushq  0x10(%rbp)
  40271b:	48 89 c7             	mov    %rax,%rdi
  40271e:	e8 db 01 00 00       	callq  4028fe <_ZNSt10_Iter_baseISt15_Deque_iteratorIP8LinknodeRKS2_PS3_ELb0EE7_S_baseES6_>
  402723:	48 83 c4 20          	add    $0x20,%rsp
  402727:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40272b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40272f:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  402736:	00 00 
  402738:	74 05                	je     40273f <_ZSt12__miter_baseISt15_Deque_iteratorIP8LinknodeRKS2_PS3_EENSt11_Miter_baseIT_E13iterator_typeES8_+0x4f>
  40273a:	e8 71 e3 ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  40273f:	c9                   	leaveq 
  402740:	c3                   	retq   

0000000000402741 <_ZSt14__copy_move_a2ILb0ESt15_Deque_iteratorIP8LinknodeRKS2_PS3_ES0_IS2_RS2_PS2_EET1_T0_SB_SA_>:
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
  402741:	55                   	push   %rbp
  402742:	48 89 e5             	mov    %rsp,%rbp
  402745:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  40274c:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  402753:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  40275a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  402761:	00 00 
  402763:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  402767:	31 c0                	xor    %eax,%eax
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
					     std::__niter_base(__last),
					     std::__niter_base(__result)));
  402769:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  402770:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  402777:	48 89 d6             	mov    %rdx,%rsi
  40277a:	48 89 c7             	mov    %rax,%rdi
  40277d:	e8 a2 ea ff ff       	callq  401224 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1ERKS4_>
  402782:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  402786:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  40278d:	48 89 d6             	mov    %rdx,%rsi
  402790:	48 89 c7             	mov    %rax,%rdi
  402793:	e8 e8 01 00 00       	callq  402980 <_ZSt12__niter_baseISt15_Deque_iteratorIP8LinknodeRS2_PS2_EENSt11_Niter_baseIT_E13iterator_typeES7_>
  402798:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  40279c:	ff 75 48             	pushq  0x48(%rbp)
  40279f:	ff 75 40             	pushq  0x40(%rbp)
  4027a2:	ff 75 38             	pushq  0x38(%rbp)
  4027a5:	ff 75 30             	pushq  0x30(%rbp)
  4027a8:	48 89 c7             	mov    %rax,%rdi
  4027ab:	e8 7f 01 00 00       	callq  40292f <_ZSt12__niter_baseISt15_Deque_iteratorIP8LinknodeRKS2_PS3_EENSt11_Niter_baseIT_E13iterator_typeES8_>
  4027b0:	48 83 c4 20          	add    $0x20,%rsp
  4027b4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4027b8:	ff 75 28             	pushq  0x28(%rbp)
  4027bb:	ff 75 20             	pushq  0x20(%rbp)
  4027be:	ff 75 18             	pushq  0x18(%rbp)
  4027c1:	ff 75 10             	pushq  0x10(%rbp)
  4027c4:	48 89 c7             	mov    %rax,%rdi
  4027c7:	e8 63 01 00 00       	callq  40292f <_ZSt12__niter_baseISt15_Deque_iteratorIP8LinknodeRKS2_PS3_EENSt11_Niter_baseIT_E13iterator_typeES8_>
  4027cc:	48 83 c4 20          	add    $0x20,%rsp
  4027d0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4027d7:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  4027db:	ff 75 c8             	pushq  -0x38(%rbp)
  4027de:	ff 75 c0             	pushq  -0x40(%rbp)
  4027e1:	ff 75 b8             	pushq  -0x48(%rbp)
  4027e4:	ff 75 b0             	pushq  -0x50(%rbp)
  4027e7:	ff 75 e8             	pushq  -0x18(%rbp)
  4027ea:	ff 75 e0             	pushq  -0x20(%rbp)
  4027ed:	ff 75 d8             	pushq  -0x28(%rbp)
  4027f0:	ff 75 d0             	pushq  -0x30(%rbp)
  4027f3:	48 89 d6             	mov    %rdx,%rsi
  4027f6:	48 89 c7             	mov    %rax,%rdi
  4027f9:	e8 e1 01 00 00       	callq  4029df <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorIP8LinknodeRKS2_PS3_ES0_IS2_RS2_PS2_EET1_T0_SB_SA_>
  4027fe:	48 83 c4 40          	add    $0x40,%rsp
    }
  402802:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  402809:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  40280d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  402814:	00 00 
  402816:	74 05                	je     40281d <_ZSt14__copy_move_a2ILb0ESt15_Deque_iteratorIP8LinknodeRKS2_PS3_ES0_IS2_RS2_PS2_EET1_T0_SB_SA_+0xdc>
  402818:	e8 93 e2 ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  40281d:	c9                   	leaveq 
  40281e:	c3                   	retq   

000000000040281f <_ZSt12__miter_baseIPPP8LinknodeENSt11_Miter_baseIT_E13iterator_typeES5_>:
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
  40281f:	55                   	push   %rbp
  402820:	48 89 e5             	mov    %rsp,%rbp
  402823:	48 83 ec 10          	sub    $0x10,%rsp
  402827:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }
  40282b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40282f:	48 89 c7             	mov    %rax,%rdi
  402832:	e8 27 02 00 00       	callq  402a5e <_ZNSt10_Iter_baseIPPP8LinknodeLb0EE7_S_baseES3_>
  402837:	c9                   	leaveq 
  402838:	c3                   	retq   

0000000000402839 <_ZSt14__copy_move_a2ILb0EPPP8LinknodeS3_ET1_T0_S5_S4_>:
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
  402839:	55                   	push   %rbp
  40283a:	48 89 e5             	mov    %rsp,%rbp
  40283d:	41 54                	push   %r12
  40283f:	53                   	push   %rbx
  402840:	48 83 ec 20          	sub    $0x20,%rsp
  402844:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  402848:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40284c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
  402850:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402854:	48 89 c7             	mov    %rax,%rdi
  402857:	e8 10 02 00 00       	callq  402a6c <_ZSt12__niter_baseIPPP8LinknodeENSt11_Niter_baseIT_E13iterator_typeES5_>
  40285c:	49 89 c4             	mov    %rax,%r12
  40285f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402863:	48 89 c7             	mov    %rax,%rdi
  402866:	e8 01 02 00 00       	callq  402a6c <_ZSt12__niter_baseIPPP8LinknodeENSt11_Niter_baseIT_E13iterator_typeES5_>
  40286b:	48 89 c3             	mov    %rax,%rbx
  40286e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402872:	48 89 c7             	mov    %rax,%rdi
  402875:	e8 f2 01 00 00       	callq  402a6c <_ZSt12__niter_baseIPPP8LinknodeENSt11_Niter_baseIT_E13iterator_typeES5_>
					     std::__niter_base(__last),
					     std::__niter_base(__result)));
  40287a:	4c 89 e2             	mov    %r12,%rdx
  40287d:	48 89 de             	mov    %rbx,%rsi
  402880:	48 89 c7             	mov    %rax,%rdi
  402883:	e8 fe 01 00 00       	callq  402a86 <_ZSt13__copy_move_aILb0EPPP8LinknodeS3_ET1_T0_S5_S4_>
    }
  402888:	48 83 c4 20          	add    $0x20,%rsp
  40288c:	5b                   	pop    %rbx
  40288d:	41 5c                	pop    %r12
  40288f:	5d                   	pop    %rbp
  402890:	c3                   	retq   

0000000000402891 <_ZSt23__copy_move_backward_a2ILb0EPPP8LinknodeS3_ET1_T0_S5_S4_>:
								 __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
  402891:	55                   	push   %rbp
  402892:	48 89 e5             	mov    %rsp,%rbp
  402895:	41 54                	push   %r12
  402897:	53                   	push   %rbx
  402898:	48 83 ec 20          	sub    $0x20,%rsp
  40289c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4028a0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4028a4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
		  (std::__niter_base(__first), std::__niter_base(__last),
  4028a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4028ac:	48 89 c7             	mov    %rax,%rdi
  4028af:	e8 b8 01 00 00       	callq  402a6c <_ZSt12__niter_baseIPPP8LinknodeENSt11_Niter_baseIT_E13iterator_typeES5_>
  4028b4:	49 89 c4             	mov    %rax,%r12
  4028b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4028bb:	48 89 c7             	mov    %rax,%rdi
  4028be:	e8 a9 01 00 00       	callq  402a6c <_ZSt12__niter_baseIPPP8LinknodeENSt11_Niter_baseIT_E13iterator_typeES5_>
  4028c3:	48 89 c3             	mov    %rax,%rbx
  4028c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4028ca:	48 89 c7             	mov    %rax,%rdi
  4028cd:	e8 9a 01 00 00       	callq  402a6c <_ZSt12__niter_baseIPPP8LinknodeENSt11_Niter_baseIT_E13iterator_typeES5_>
		   std::__niter_base(__result)));
  4028d2:	4c 89 e2             	mov    %r12,%rdx
  4028d5:	48 89 de             	mov    %rbx,%rsi
  4028d8:	48 89 c7             	mov    %rax,%rdi
  4028db:	e8 d7 01 00 00       	callq  402ab7 <_ZSt22__copy_move_backward_aILb0EPPP8LinknodeS3_ET1_T0_S5_S4_>
    }
  4028e0:	48 83 c4 20          	add    $0x20,%rsp
  4028e4:	5b                   	pop    %rbx
  4028e5:	41 5c                	pop    %r12
  4028e7:	5d                   	pop    %rbp
  4028e8:	c3                   	retq   
  4028e9:	90                   	nop

00000000004028ea <_ZNK9__gnu_cxx13new_allocatorIP8LinknodeE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
  4028ea:	55                   	push   %rbp
  4028eb:	48 89 e5             	mov    %rsp,%rbp
  4028ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  4028f2:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  4028f9:	ff ff 1f 
  4028fc:	5d                   	pop    %rbp
  4028fd:	c3                   	retq   

00000000004028fe <_ZNSt10_Iter_baseISt15_Deque_iteratorIP8LinknodeRKS2_PS3_ELb0EE7_S_baseES6_>:
  // untouched
  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
  4028fe:	55                   	push   %rbp
  4028ff:	48 89 e5             	mov    %rsp,%rbp
  402902:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return __it; }
  402906:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40290a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  40290e:	48 89 10             	mov    %rdx,(%rax)
  402911:	48 8b 55 18          	mov    0x18(%rbp),%rdx
  402915:	48 89 50 08          	mov    %rdx,0x8(%rax)
  402919:	48 8b 55 20          	mov    0x20(%rbp),%rdx
  40291d:	48 89 50 10          	mov    %rdx,0x10(%rax)
  402921:	48 8b 55 28          	mov    0x28(%rbp),%rdx
  402925:	48 89 50 18          	mov    %rdx,0x18(%rax)
  402929:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40292d:	5d                   	pop    %rbp
  40292e:	c3                   	retq   

000000000040292f <_ZSt12__niter_baseISt15_Deque_iteratorIP8LinknodeRKS2_PS3_EENSt11_Niter_baseIT_E13iterator_typeES8_>:
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
  40292f:	55                   	push   %rbp
  402930:	48 89 e5             	mov    %rsp,%rbp
  402933:	48 83 ec 20          	sub    $0x20,%rsp
  402937:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40293b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  402942:	00 00 
  402944:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  402948:	31 c0                	xor    %eax,%eax
    { return std::_Niter_base<_Iterator>::_S_base(__it); }
  40294a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40294e:	ff 75 28             	pushq  0x28(%rbp)
  402951:	ff 75 20             	pushq  0x20(%rbp)
  402954:	ff 75 18             	pushq  0x18(%rbp)
  402957:	ff 75 10             	pushq  0x10(%rbp)
  40295a:	48 89 c7             	mov    %rax,%rdi
  40295d:	e8 9c ff ff ff       	callq  4028fe <_ZNSt10_Iter_baseISt15_Deque_iteratorIP8LinknodeRKS2_PS3_ELb0EE7_S_baseES6_>
  402962:	48 83 c4 20          	add    $0x20,%rsp
  402966:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40296a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40296e:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  402975:	00 00 
  402977:	74 05                	je     40297e <_ZSt12__niter_baseISt15_Deque_iteratorIP8LinknodeRKS2_PS3_EENSt11_Niter_baseIT_E13iterator_typeES8_+0x4f>
  402979:	e8 32 e1 ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  40297e:	c9                   	leaveq 
  40297f:	c3                   	retq   

0000000000402980 <_ZSt12__niter_baseISt15_Deque_iteratorIP8LinknodeRS2_PS2_EENSt11_Niter_baseIT_E13iterator_typeES7_>:
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
  402980:	55                   	push   %rbp
  402981:	48 89 e5             	mov    %rsp,%rbp
  402984:	48 83 ec 40          	sub    $0x40,%rsp
  402988:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40298c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  402990:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  402997:	00 00 
  402999:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40299d:	31 c0                	xor    %eax,%eax
    { return std::_Niter_base<_Iterator>::_S_base(__it); }
  40299f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4029a3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4029a7:	48 89 d6             	mov    %rdx,%rsi
  4029aa:	48 89 c7             	mov    %rax,%rdi
  4029ad:	e8 72 e8 ff ff       	callq  401224 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1ERKS4_>
  4029b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4029b6:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  4029ba:	48 89 d6             	mov    %rdx,%rsi
  4029bd:	48 89 c7             	mov    %rax,%rdi
  4029c0:	e8 23 01 00 00       	callq  402ae8 <_ZNSt10_Iter_baseISt15_Deque_iteratorIP8LinknodeRS2_PS2_ELb0EE7_S_baseES5_>
  4029c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4029c9:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4029cd:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4029d4:	00 00 
  4029d6:	74 05                	je     4029dd <_ZSt12__niter_baseISt15_Deque_iteratorIP8LinknodeRS2_PS2_EENSt11_Niter_baseIT_E13iterator_typeES7_+0x5d>
  4029d8:	e8 d3 e0 ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  4029dd:	c9                   	leaveq 
  4029de:	c3                   	retq   

00000000004029df <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorIP8LinknodeRKS2_PS3_ES0_IS2_RS2_PS2_EET1_T0_SB_SA_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
  4029df:	55                   	push   %rbp
  4029e0:	48 89 e5             	mov    %rsp,%rbp
  4029e3:	48 83 ec 50          	sub    $0x50,%rsp
  4029e7:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  4029eb:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  4029ef:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4029f6:	00 00 
  4029f8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4029fc:	31 c0                	xor    %eax,%eax
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
  4029fe:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
  402a02:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  402a06:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  402a0a:	48 89 d6             	mov    %rdx,%rsi
  402a0d:	48 89 c7             	mov    %rax,%rdi
  402a10:	e8 0f e8 ff ff       	callq  401224 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1ERKS4_>
  402a15:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402a19:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  402a1d:	ff 75 48             	pushq  0x48(%rbp)
  402a20:	ff 75 40             	pushq  0x40(%rbp)
  402a23:	ff 75 38             	pushq  0x38(%rbp)
  402a26:	ff 75 30             	pushq  0x30(%rbp)
  402a29:	ff 75 28             	pushq  0x28(%rbp)
  402a2c:	ff 75 20             	pushq  0x20(%rbp)
  402a2f:	ff 75 18             	pushq  0x18(%rbp)
  402a32:	ff 75 10             	pushq  0x10(%rbp)
  402a35:	48 89 d6             	mov    %rdx,%rsi
  402a38:	48 89 c7             	mov    %rax,%rdi
  402a3b:	e8 d1 00 00 00       	callq  402b11 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorIP8LinknodeRKS5_PS6_ES3_IS5_RS5_PS5_EEET0_T_SE_SD_>
  402a40:	48 83 c4 40          	add    $0x40,%rsp
    }
  402a44:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  402a48:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  402a4c:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  402a53:	00 00 
  402a55:	74 05                	je     402a5c <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorIP8LinknodeRKS2_PS3_ES0_IS2_RS2_PS2_EET1_T0_SB_SA_+0x7d>
  402a57:	e8 54 e0 ff ff       	callq  400ab0 <__stack_chk_fail@plt>
  402a5c:	c9                   	leaveq 
  402a5d:	c3                   	retq   

0000000000402a5e <_ZNSt10_Iter_baseIPPP8LinknodeLb0EE7_S_baseES3_>:
  // untouched
  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
  402a5e:	55                   	push   %rbp
  402a5f:	48 89 e5             	mov    %rsp,%rbp
  402a62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return __it; }
  402a66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402a6a:	5d                   	pop    %rbp
  402a6b:	c3                   	retq   

0000000000402a6c <_ZSt12__niter_baseIPPP8LinknodeENSt11_Niter_baseIT_E13iterator_typeES5_>:
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
  402a6c:	55                   	push   %rbp
  402a6d:	48 89 e5             	mov    %rsp,%rbp
  402a70:	48 83 ec 10          	sub    $0x10,%rsp
  402a74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }
  402a78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402a7c:	48 89 c7             	mov    %rax,%rdi
  402a7f:	e8 da ff ff ff       	callq  402a5e <_ZNSt10_Iter_baseIPPP8LinknodeLb0EE7_S_baseES3_>
  402a84:	c9                   	leaveq 
  402a85:	c3                   	retq   

0000000000402a86 <_ZSt13__copy_move_aILb0EPPP8LinknodeS3_ET1_T0_S5_S4_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
  402a86:	55                   	push   %rbp
  402a87:	48 89 e5             	mov    %rsp,%rbp
  402a8a:	48 83 ec 30          	sub    $0x30,%rsp
  402a8e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  402a92:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  402a96:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
  402a9a:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
  402a9e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  402aa2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  402aa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402aaa:	48 89 ce             	mov    %rcx,%rsi
  402aad:	48 89 c7             	mov    %rax,%rdi
  402ab0:	e8 e0 00 00 00       	callq  402b95 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP8LinknodeEEPT_PKS6_S9_S7_>
    }
  402ab5:	c9                   	leaveq 
  402ab6:	c3                   	retq   

0000000000402ab7 <_ZSt22__copy_move_backward_aILb0EPPP8LinknodeS3_ET1_T0_S5_S4_>:
	}
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
  402ab7:	55                   	push   %rbp
  402ab8:	48 89 e5             	mov    %rsp,%rbp
  402abb:	48 83 ec 30          	sub    $0x30,%rsp
  402abf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  402ac3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  402ac7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
	                     && __is_pointer<_BI1>::__value
	                     && __is_pointer<_BI2>::__value
			     && __are_same<_ValueType1, _ValueType2>::__value);
  402acb:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)

      return std::__copy_move_backward<_IsMove, __simple,
	                               _Category>::__copy_move_b(__first,
								 __last,
								 __result);
  402acf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  402ad3:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  402ad7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402adb:	48 89 ce             	mov    %rcx,%rsi
  402ade:	48 89 c7             	mov    %rax,%rdi
  402ae1:	e8 14 01 00 00       	callq  402bfa <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP8LinknodeEEPT_PKS6_S9_S7_>
    }
  402ae6:	c9                   	leaveq 
  402ae7:	c3                   	retq   

0000000000402ae8 <_ZNSt10_Iter_baseISt15_Deque_iteratorIP8LinknodeRS2_PS2_ELb0EE7_S_baseES5_>:
  // untouched
  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
  402ae8:	55                   	push   %rbp
  402ae9:	48 89 e5             	mov    %rsp,%rbp
  402aec:	48 83 ec 10          	sub    $0x10,%rsp
  402af0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402af4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __it; }
  402af8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402afc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402b00:	48 89 d6             	mov    %rdx,%rsi
  402b03:	48 89 c7             	mov    %rax,%rdi
  402b06:	e8 19 e7 ff ff       	callq  401224 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1ERKS4_>
  402b0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402b0f:	c9                   	leaveq 
  402b10:	c3                   	retq   

0000000000402b11 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorIP8LinknodeRKS5_PS6_ES3_IS5_RS5_PS5_EEET0_T_SE_SD_>:
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
  402b11:	55                   	push   %rbp
  402b12:	48 89 e5             	mov    %rsp,%rbp
  402b15:	53                   	push   %rbx
  402b16:	48 83 ec 28          	sub    $0x28,%rsp
  402b1a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  402b1e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
  402b22:	48 8d 45 30          	lea    0x30(%rbp),%rax
  402b26:	48 8d 75 10          	lea    0x10(%rbp),%rsi
  402b2a:	48 89 c7             	mov    %rax,%rdi
  402b2d:	e8 40 01 00 00       	callq  402c72 <_ZStmiIP8LinknodeRKS1_PS2_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS9_SC_>
  402b32:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  402b36:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  402b3b:	7e 3a                	jle    402b77 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorIP8LinknodeRKS5_PS6_ES3_IS5_RS5_PS5_EEET0_T_SE_SD_+0x66>
	    {
	      *__result = *__first;
  402b3d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402b41:	48 89 c7             	mov    %rax,%rdi
  402b44:	e8 fd ef ff ff       	callq  401b46 <_ZNKSt15_Deque_iteratorIP8LinknodeRS1_PS1_EdeEv>
  402b49:	48 89 c3             	mov    %rax,%rbx
  402b4c:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  402b50:	e8 9b 01 00 00       	callq  402cf0 <_ZNKSt15_Deque_iteratorIP8LinknodeRKS1_PS2_EdeEv>
  402b55:	48 8b 00             	mov    (%rax),%rax
  402b58:	48 89 03             	mov    %rax,(%rbx)
	      ++__first;
  402b5b:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  402b5f:	e8 9e 01 00 00       	callq  402d02 <_ZNSt15_Deque_iteratorIP8LinknodeRKS1_PS2_EppEv>
	      ++__result;
  402b64:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  402b68:	48 89 c7             	mov    %rax,%rdi
  402b6b:	e8 f4 01 00 00       	callq  402d64 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EppEv>
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
  402b70:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  402b75:	eb bf                	jmp    402b36 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorIP8LinknodeRKS5_PS6_ES3_IS5_RS5_PS5_EEET0_T_SE_SD_+0x25>
	    {
	      *__result = *__first;
	      ++__first;
	      ++__result;
	    }
	  return __result;
  402b77:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  402b7b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402b7f:	48 89 d6             	mov    %rdx,%rsi
  402b82:	48 89 c7             	mov    %rax,%rdi
  402b85:	e8 9a e6 ff ff       	callq  401224 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EC1ERKS4_>
	}
  402b8a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402b8e:	48 83 c4 28          	add    $0x28,%rsp
  402b92:	5b                   	pop    %rbx
  402b93:	5d                   	pop    %rbp
  402b94:	c3                   	retq   

0000000000402b95 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP8LinknodeEEPT_PKS6_S9_S7_>:
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
  402b95:	55                   	push   %rbp
  402b96:	48 89 e5             	mov    %rsp,%rbp
  402b99:	48 83 ec 30          	sub    $0x30,%rsp
  402b9d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  402ba1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  402ba5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
  402ba9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  402bad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402bb1:	48 29 c2             	sub    %rax,%rdx
  402bb4:	48 89 d0             	mov    %rdx,%rax
  402bb7:	48 c1 f8 03          	sar    $0x3,%rax
  402bbb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
  402bbf:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  402bc4:	74 1f                	je     402be5 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP8LinknodeEEPT_PKS6_S9_S7_+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  402bc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402bca:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  402bd1:	00 
  402bd2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  402bd6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402bda:	48 89 ce             	mov    %rcx,%rsi
  402bdd:	48 89 c7             	mov    %rax,%rdi
  402be0:	e8 bb de ff ff       	callq  400aa0 <memmove@plt>
	  return __result + _Num;
  402be5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402be9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  402bf0:	00 
  402bf1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402bf5:	48 01 d0             	add    %rdx,%rax
	}
  402bf8:	c9                   	leaveq 
  402bf9:	c3                   	retq   

0000000000402bfa <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP8LinknodeEEPT_PKS6_S9_S7_>:
  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
  402bfa:	55                   	push   %rbp
  402bfb:	48 89 e5             	mov    %rsp,%rbp
  402bfe:	48 83 ec 30          	sub    $0x30,%rsp
  402c02:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  402c06:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  402c0a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
  402c0e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  402c12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402c16:	48 29 c2             	sub    %rax,%rdx
  402c19:	48 89 d0             	mov    %rdx,%rax
  402c1c:	48 c1 f8 03          	sar    $0x3,%rax
  402c20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
  402c24:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  402c29:	74 30                	je     402c5b <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP8LinknodeEEPT_PKS6_S9_S7_+0x61>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
  402c2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402c2f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  402c36:	00 
  402c37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402c3b:	48 c1 e0 03          	shl    $0x3,%rax
  402c3f:	48 f7 d8             	neg    %rax
  402c42:	48 89 c1             	mov    %rax,%rcx
  402c45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402c49:	48 01 c1             	add    %rax,%rcx
  402c4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402c50:	48 89 c6             	mov    %rax,%rsi
  402c53:	48 89 cf             	mov    %rcx,%rdi
  402c56:	e8 45 de ff ff       	callq  400aa0 <memmove@plt>
	  return __result - _Num;
  402c5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402c5f:	48 c1 e0 03          	shl    $0x3,%rax
  402c63:	48 f7 d8             	neg    %rax
  402c66:	48 89 c2             	mov    %rax,%rdx
  402c69:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402c6d:	48 01 d0             	add    %rdx,%rax
	}
  402c70:	c9                   	leaveq 
  402c71:	c3                   	retq   

0000000000402c72 <_ZStmiIP8LinknodeRKS1_PS2_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS9_SC_>:
  // According to the resolution of DR179 not only the various comparison
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _Tp, typename _Ref, typename _Ptr>
    inline typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
  402c72:	55                   	push   %rbp
  402c73:	48 89 e5             	mov    %rsp,%rbp
  402c76:	48 83 ec 10          	sub    $0x10,%rsp
  402c7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  402c7e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
  402c82:	e8 3f 01 00 00       	callq  402dc6 <_ZNSt15_Deque_iteratorIP8LinknodeRKS1_PS2_E14_S_buffer_sizeEv>
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
	+ (__y._M_last - __y._M_cur);
  402c87:	48 89 c2             	mov    %rax,%rdx
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
  402c8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402c8e:	48 8b 40 18          	mov    0x18(%rax),%rax
	+ (__y._M_last - __y._M_cur);
  402c92:	48 89 c1             	mov    %rax,%rcx
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
  402c95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402c99:	48 8b 40 18          	mov    0x18(%rax),%rax
	+ (__y._M_last - __y._M_cur);
  402c9d:	48 29 c1             	sub    %rax,%rcx
  402ca0:	48 89 c8             	mov    %rcx,%rax
  402ca3:	48 c1 f8 03          	sar    $0x3,%rax
  402ca7:	48 83 e8 01          	sub    $0x1,%rax
  402cab:	48 0f af d0          	imul   %rax,%rdx
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
  402caf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402cb3:	48 8b 00             	mov    (%rax),%rax
	+ (__y._M_last - __y._M_cur);
  402cb6:	48 89 c1             	mov    %rax,%rcx
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
  402cb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402cbd:	48 8b 40 08          	mov    0x8(%rax),%rax
	+ (__y._M_last - __y._M_cur);
  402cc1:	48 29 c1             	sub    %rax,%rcx
  402cc4:	48 89 c8             	mov    %rcx,%rax
  402cc7:	48 c1 f8 03          	sar    $0x3,%rax
  402ccb:	48 01 c2             	add    %rax,%rdx
  402cce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402cd2:	48 8b 40 10          	mov    0x10(%rax),%rax
  402cd6:	48 89 c1             	mov    %rax,%rcx
  402cd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402cdd:	48 8b 00             	mov    (%rax),%rax
  402ce0:	48 29 c1             	sub    %rax,%rcx
  402ce3:	48 89 c8             	mov    %rcx,%rax
  402ce6:	48 c1 f8 03          	sar    $0x3,%rax
  402cea:	48 01 d0             	add    %rdx,%rax
    }
  402ced:	c9                   	leaveq 
  402cee:	c3                   	retq   
  402cef:	90                   	nop

0000000000402cf0 <_ZNKSt15_Deque_iteratorIP8LinknodeRKS1_PS2_EdeEv>:
      iterator
      _M_const_cast() const _GLIBCXX_NOEXCEPT
      { return iterator(_M_cur, _M_node); }

      reference
      operator*() const _GLIBCXX_NOEXCEPT
  402cf0:	55                   	push   %rbp
  402cf1:	48 89 e5             	mov    %rsp,%rbp
  402cf4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_cur; }
  402cf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402cfc:	48 8b 00             	mov    (%rax),%rax
  402cff:	5d                   	pop    %rbp
  402d00:	c3                   	retq   
  402d01:	90                   	nop

0000000000402d02 <_ZNSt15_Deque_iteratorIP8LinknodeRKS1_PS2_EppEv>:
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_cur; }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
  402d02:	55                   	push   %rbp
  402d03:	48 89 e5             	mov    %rsp,%rbp
  402d06:	48 83 ec 10          	sub    $0x10,%rsp
  402d0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	++_M_cur;
  402d0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d12:	48 8b 00             	mov    (%rax),%rax
  402d15:	48 8d 50 08          	lea    0x8(%rax),%rdx
  402d19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d1d:	48 89 10             	mov    %rdx,(%rax)
	if (_M_cur == _M_last)
  402d20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d24:	48 8b 10             	mov    (%rax),%rdx
  402d27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d2b:	48 8b 40 10          	mov    0x10(%rax),%rax
  402d2f:	48 39 c2             	cmp    %rax,%rdx
  402d32:	75 2a                	jne    402d5e <_ZNSt15_Deque_iteratorIP8LinknodeRKS1_PS2_EppEv+0x5c>
	  {
	    _M_set_node(_M_node + 1);
  402d34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d38:	48 8b 40 18          	mov    0x18(%rax),%rax
  402d3c:	48 8d 50 08          	lea    0x8(%rax),%rdx
  402d40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d44:	48 89 d6             	mov    %rdx,%rsi
  402d47:	48 89 c7             	mov    %rax,%rdi
  402d4a:	e8 87 00 00 00       	callq  402dd6 <_ZNSt15_Deque_iteratorIP8LinknodeRKS1_PS2_E11_M_set_nodeEPPS1_>
	    _M_cur = _M_first;
  402d4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d53:	48 8b 50 08          	mov    0x8(%rax),%rdx
  402d57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d5b:	48 89 10             	mov    %rdx,(%rax)
	  }
	return *this;
  402d5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  402d62:	c9                   	leaveq 
  402d63:	c3                   	retq   

0000000000402d64 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EppEv>:
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_cur; }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
  402d64:	55                   	push   %rbp
  402d65:	48 89 e5             	mov    %rsp,%rbp
  402d68:	48 83 ec 10          	sub    $0x10,%rsp
  402d6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	++_M_cur;
  402d70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d74:	48 8b 00             	mov    (%rax),%rax
  402d77:	48 8d 50 08          	lea    0x8(%rax),%rdx
  402d7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d7f:	48 89 10             	mov    %rdx,(%rax)
	if (_M_cur == _M_last)
  402d82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d86:	48 8b 10             	mov    (%rax),%rdx
  402d89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d8d:	48 8b 40 10          	mov    0x10(%rax),%rax
  402d91:	48 39 c2             	cmp    %rax,%rdx
  402d94:	75 2a                	jne    402dc0 <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_EppEv+0x5c>
	  {
	    _M_set_node(_M_node + 1);
  402d96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402d9a:	48 8b 40 18          	mov    0x18(%rax),%rax
  402d9e:	48 8d 50 08          	lea    0x8(%rax),%rdx
  402da2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402da6:	48 89 d6             	mov    %rdx,%rsi
  402da9:	48 89 c7             	mov    %rax,%rdi
  402dac:	e8 eb ef ff ff       	callq  401d9c <_ZNSt15_Deque_iteratorIP8LinknodeRS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_first;
  402db1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402db5:	48 8b 50 08          	mov    0x8(%rax),%rdx
  402db9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402dbd:	48 89 10             	mov    %rdx,(%rax)
	  }
	return *this;
  402dc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  402dc4:	c9                   	leaveq 
  402dc5:	c3                   	retq   

0000000000402dc6 <_ZNSt15_Deque_iteratorIP8LinknodeRKS1_PS2_E14_S_buffer_sizeEv>:
      typedef __iter<const _Tp>		const_iterator;
      typedef __ptr_to<_Tp>		_Elt_pointer;
      typedef __ptr_to<_Elt_pointer>	_Map_pointer;
#endif

      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
  402dc6:	55                   	push   %rbp
  402dc7:	48 89 e5             	mov    %rsp,%rbp
      { return __deque_buf_size(sizeof(_Tp)); }
  402dca:	bf 08 00 00 00       	mov    $0x8,%edi
  402dcf:	e8 49 e1 ff ff       	callq  400f1d <_ZSt16__deque_buf_sizem>
  402dd4:	5d                   	pop    %rbp
  402dd5:	c3                   	retq   

0000000000402dd6 <_ZNSt15_Deque_iteratorIP8LinknodeRKS1_PS2_E11_M_set_nodeEPPS1_>:
       *  Prepares to traverse new_node.  Sets everything except
       *  _M_cur, which should therefore be set by the caller
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
  402dd6:	55                   	push   %rbp
  402dd7:	48 89 e5             	mov    %rsp,%rbp
  402dda:	53                   	push   %rbx
  402ddb:	48 83 ec 18          	sub    $0x18,%rsp
  402ddf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  402de3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      {
	_M_node = __new_node;
  402de7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402deb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  402def:	48 89 50 18          	mov    %rdx,0x18(%rax)
	_M_first = *__new_node;
  402df3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402df7:	48 8b 10             	mov    (%rax),%rdx
  402dfa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402dfe:	48 89 50 08          	mov    %rdx,0x8(%rax)
	_M_last = _M_first + difference_type(_S_buffer_size());
  402e02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402e06:	48 8b 58 08          	mov    0x8(%rax),%rbx
  402e0a:	e8 b7 ff ff ff       	callq  402dc6 <_ZNSt15_Deque_iteratorIP8LinknodeRKS1_PS2_E14_S_buffer_sizeEv>
  402e0f:	48 c1 e0 03          	shl    $0x3,%rax
  402e13:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  402e17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402e1b:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
  402e1f:	90                   	nop
  402e20:	48 83 c4 18          	add    $0x18,%rsp
  402e24:	5b                   	pop    %rbx
  402e25:	5d                   	pop    %rbp
  402e26:	c3                   	retq   
  402e27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  402e2e:	00 00 

0000000000402e30 <__libc_csu_init>:
  402e30:	41 57                	push   %r15
  402e32:	41 56                	push   %r14
  402e34:	41 89 ff             	mov    %edi,%r15d
  402e37:	41 55                	push   %r13
  402e39:	41 54                	push   %r12
  402e3b:	4c 8d 25 a6 1f 20 00 	lea    0x201fa6(%rip),%r12        # 604de8 <__frame_dummy_init_array_entry>
  402e42:	55                   	push   %rbp
  402e43:	48 8d 2d ae 1f 20 00 	lea    0x201fae(%rip),%rbp        # 604df8 <__init_array_end>
  402e4a:	53                   	push   %rbx
  402e4b:	49 89 f6             	mov    %rsi,%r14
  402e4e:	49 89 d5             	mov    %rdx,%r13
  402e51:	4c 29 e5             	sub    %r12,%rbp
  402e54:	48 83 ec 08          	sub    $0x8,%rsp
  402e58:	48 c1 fd 03          	sar    $0x3,%rbp
  402e5c:	e8 77 db ff ff       	callq  4009d8 <_init>
  402e61:	48 85 ed             	test   %rbp,%rbp
  402e64:	74 20                	je     402e86 <__libc_csu_init+0x56>
  402e66:	31 db                	xor    %ebx,%ebx
  402e68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  402e6f:	00 
  402e70:	4c 89 ea             	mov    %r13,%rdx
  402e73:	4c 89 f6             	mov    %r14,%rsi
  402e76:	44 89 ff             	mov    %r15d,%edi
  402e79:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  402e7d:	48 83 c3 01          	add    $0x1,%rbx
  402e81:	48 39 eb             	cmp    %rbp,%rbx
  402e84:	75 ea                	jne    402e70 <__libc_csu_init+0x40>
  402e86:	48 83 c4 08          	add    $0x8,%rsp
  402e8a:	5b                   	pop    %rbx
  402e8b:	5d                   	pop    %rbp
  402e8c:	41 5c                	pop    %r12
  402e8e:	41 5d                	pop    %r13
  402e90:	41 5e                	pop    %r14
  402e92:	41 5f                	pop    %r15
  402e94:	c3                   	retq   
  402e95:	90                   	nop
  402e96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e9d:	00 00 00 

0000000000402ea0 <__libc_csu_fini>:
  402ea0:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000402ea4 <_fini>:
  402ea4:	48 83 ec 08          	sub    $0x8,%rsp
  402ea8:	48 83 c4 08          	add    $0x8,%rsp
  402eac:	c3                   	retq   
